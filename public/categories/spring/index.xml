<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/categories/spring/</link>
    <description>Recent content in Spring on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Thu, 30 Jan 2025 16:50:24 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Spring] 스프링부트와 HikariCP를 활용한 Connection Pool 설정 및 최적화</title>
      <link>http://localhost:1313/posts/125/</link>
      <pubDate>Thu, 30 Jan 2025 16:50:24 +0000</pubDate>
      <guid>http://localhost:1313/posts/125/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;몇 년 전 운영 프로젝트 설정 시 자세하게 봤던 내용이지만, 트래픽이 대폭 증가하고, DBMS에 연결된 프로젝트와 모듈이 늘어남에 따라 재설정을 위해 개념을 다시 정리하게 되었다.&lt;/p&gt;
&lt;h3 id=&#34;기본적인-데이터베이스-연결과정&#34; ke-size=&#34;size23&#34;&gt;1. 기본적인 데이터베이스 연결과정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DB Connection 열기&lt;/strong&gt;- 데이터베이스 드라이버를 사용하여 데이터베이스 서버와의 연결&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP 소켓 열기&lt;/strong&gt; - 데이터베이스 전송을 위해 TCP 소켓을 생성하고 데이터베이스 서버와 통신채널을 설정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;데이터 통신 수행&lt;/strong&gt; - 생성된 소켓을 통해 SQL 쿼리를 전송하고 데이터를 Read / Write&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DB연결 닫기&lt;/strong&gt; - 데이터 통신이 완료되면 데이터베이스와의 연결을 종료&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP 소켓 닫기&lt;/strong&gt; - 사용한 TCP 소켓을 닫아 통신 채널 해제&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;웹 어플리케이션은 클라이언트의 HTTP 요청이 들어오면 스레드를 생성한다. 각 요청 시 DB서버로부터 데이터를 얻기 위해서 DB에 지속적으로 접근하는 작업이 필요하다. 스프링부트를 예로 들면, DB에 직접 연결하는 경우, JDBC 드라이버는 애플리케이션 시작 시 한번 로드되고, 사용자 요청 시마다 새로운 connection 객체 생성하여 데이터베이스에 연결한 후 종료되어야 한다. 이렇게 사용자 요청 시 매번 connection 객체를 생성/연결/종료해야 한다면 굉장히 비효율적이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 테스트 4 - 얼마나 깊게 테스트 코드를 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/99/</link>
      <pubDate>Sun, 22 Sep 2024 17:59:07 +0000</pubDate>
      <guid>http://localhost:1313/posts/99/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;how-deep---얼마나-깊게-테스트-코드를-작성해야-하는가&#34; ke-size=&#34;size26&#34;&gt;4. HOW DEEP - 얼마나 깊게 테스트 코드를 작성해야 하는가?&lt;/h2&gt;
&lt;h3 id=&#34;테스트-깊이를-결정하는-기준&#34; ke-size=&#34;size23&#34;&gt;4.1 테스트 깊이를 결정하는 기준&lt;/h3&gt;
&lt;p&gt;테스트 깊이를 설정할 때는 다음과 같은 기준을 고려해야 합니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;테스트 피라미드(Test Pyramid)&lt;/strong&gt;: 테스트 피라미드는 테스트 종류에 따른 계층 구조를 보여줍니다. 일반적으로 단위 테스트가 가장 많고, 그다음으로 통합 테스트, 시스템 또는 E2E(End-to-End) 테스트가 위치합니다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;단위 테스트(Unit Tests)&lt;/strong&gt;: 가장 많은 비중을 차지하며, 작은 코드 단위를 독립적으로 테스트합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;통합 테스트(Integration Tests)&lt;/strong&gt;: 여러 모듈이 상호작용하는지 테스트합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E2E 테스트(End-to-End Tests)&lt;/strong&gt;: 실제 사용자 관점에서 전체 시스템이 잘 작동하는지 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;위험 기반 테스트(Risk-Based Testing)&lt;/strong&gt;: 비즈니스 중요도와 잠재적 위험 요소에 따라 테스트 우선순위를 설정합니다. 비즈니스에 중요한 기능이나 리스크가 높은 부분에 대한 테스트는 더 깊이 있게 수행합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;유스 케이스 기반 테스트&lt;/strong&gt;: 핵심 사용자 흐름과 엣지 케이스를 기반으로 테스트를 작성합니다. 실제로 사용자가 자주 사용하는 기능이나 예외적인 상황에서의 동작을 검증하는 것이 중요합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;현실적인 제약과 팀 역량 고려&lt;/strong&gt;: 모든 부분을 깊이 테스트하는 것은 시간과 리소스 측면에서 비효율적일 수 있습니다. 팀의 역량과 프로젝트 일정 등을 고려하여 테스트 깊이를 조정하는 것이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/99/img.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 테스트 3 - 언제 테스트 코드를 적용해야 하는가?</title>
      <link>http://localhost:1313/posts/98/</link>
      <pubDate>Sun, 22 Sep 2024 17:57:13 +0000</pubDate>
      <guid>http://localhost:1313/posts/98/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;3-when---언제-테스트-코드를-적용해야-하는가&#34;&gt;3. WHEN - 언제 테스트 코드를 적용해야 하는가?&lt;/h1&gt;
&lt;h2 id=&#34;tdd와-bdd의-개념-및-적용-시점&#34; ke-size=&#34;size26&#34;&gt;3.1 TDD와 BDD의 개념 및 적용 시점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TDD (Test-Driven Development)&lt;/strong&gt;: TDD는 테스트를 먼저 작성하고, 그 테스트를 통과할 수 있는 최소한의 코드를 작성하며 개발을 진행하는 방법론입니다. TDD는 테스트를 통해 명확한 요구사항을 확인하고 코드 품질을 보장하는 방법으로 활용됩니다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;레드-그린-리팩터 사이클&lt;/strong&gt;: TDD의 기본 개발 사이클은 &lt;code&gt;레드 단계&lt;/code&gt; (실패하는 테스트 작성) → &lt;code&gt;그린 단계&lt;/code&gt; (테스트를 통과하기 위한 코드 작성) → &lt;code&gt;리팩터 단계&lt;/code&gt; (코드 정리 및 최적화)로 이루어집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적용 시점&lt;/strong&gt;: 새로운 기능을 개발하거나 기존 코드를 리팩터링 할 때, TDD를 통해 코드의 안정성과 유지보수성을 높일 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/98/img.png&#34;&gt;
이미지출처: &lt;a href=&#34;https://medium.com/pilar-2020/applying-test-driven-development-6d6d3af186cbApplying&#34;&gt;https://medium.com/pilar-2020/applying-test-driven-development-6d6d3af186cbApplying&lt;/a&gt;\ Test-Driven\ Development&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 테스트 2 - 테스트 코드를 어떻게 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/97/</link>
      <pubDate>Sun, 22 Sep 2024 17:55:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/97/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;2-how---테스트-코드를-어떻게-작성해야-하는가&#34;&gt;2. HOW - 테스트 코드를 어떻게 작성해야 하는가?&lt;/h1&gt;
&lt;h2 id=&#34;테스트-케이스-선택-방법&#34; ke-size=&#34;size26&#34;&gt;2.1 테스트 케이스 선택 방법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;첫 번째 테스트의 중요성&lt;/strong&gt;: 구현하기 가장 쉬운 테스트부터 시작하는 것이 좋습니다. 예외적인 상황이나 가장 빠르게 개발할 수 있는 테스트 케이스를 먼저 작성하고, 점차 확장해 나갑니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;점진적 확장&lt;/strong&gt;: 쉬운 테스트부터 시작해 점차 복잡한 테스트로 나아가면서 시스템의 안정성을 검증합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tdd-test-driven-development-방법론&#34; ke-size=&#34;size26&#34;&gt;2.2 TDD (Test-Driven Development) 방법론&lt;/h2&gt;
&lt;p&gt;TDD는 테스트 주도 개발 방식으로, 테스트 코드를 먼저 작성하고 이를 기반으로 프로덕션 코드를 작성하는 방식입니다. TDD는 다음과 같은 세 단계를 따릅니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 테스트 1 - 왜 테스트 코드를 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/96/</link>
      <pubDate>Sun, 22 Sep 2024 17:50:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/96/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/96/img.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-why---왜-테스트를-작성해야-하는가&#34;&gt;1. WHY - 왜 테스트를 작성해야 하는가?&lt;/h1&gt;
&lt;h2 id=&#34;테스트-코드의-중요성&#34; ke-size=&#34;size26&#34;&gt;1.1 테스트 코드의 중요성&lt;/h2&gt;
&lt;p&gt;테스트 코드는 소프트웨어 개발에서 매우 중요한 역할을 합니다. 기능을 수정하거나 새로운 기능을 추가할 때 코드가 안정적으로 작동하는지 확인할 수 있는 수단이 바로 테스트 코드입니다. 이를 통해 예상하지 못한 버그를 방지하고, 코드 품질을 높일 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;테스트-코드-작성의-장점&#34; ke-size=&#34;size26&#34;&gt;1.2 테스트 코드 작성의 장점&lt;/h2&gt;
&lt;h3 id=&#34;안정적인-개발-환경-구축&#34; ke-size=&#34;size23&#34;&gt;1.2.1 안정적인 개발 환경 구축&lt;/h3&gt;
&lt;p&gt;테스트 코드는 코드의 변경이 다른 기능에 미치는 영향을 최소화하는 데 도움을 줍니다. 개발자는 자신 있게 코드를 수정하거나 리팩터링 할 수 있으며, 기존 기능이 예상대로 작동하는지 검증할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] Caused by: java.lang.IllegalArgumentException: 이름이 {fragment}인, 둘 이상의 fragment들이 발견되었습니다.</title>
      <link>http://localhost:1313/posts/95/</link>
      <pubDate>Tue, 20 Aug 2024 10:41:57 +0000</pubDate>
      <guid>http://localhost:1313/posts/95/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/95/img.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Caused by: java.lang.IllegalArgumentException: 이름이 {fragment}인, 둘 이상의 fragment들이 발견되었습니다. 이는 상대적 순서배열에서 불허됩니다. 상세 정보는 서블릿 스펙 8.2.2 2c 장을 참조하십시오. 절대적 순서배열을 사용하는 것을 고려해 보십시오.]
 &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Spring MVC가 포함되어 있는 상태에서 중복된 디펜던시를 추가하면서 발생한 에러이다. 라이브러리 버전업, 혹은 신규 라이브러리 추가 시 주로 발생하는 현상으로, 메이븐 클린을 통해 메이븐 리포지토리를 정리하면 된다.
 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;메이븐 클린(프로젝트 우클릭 &amp;gt; maven &amp;gt; maven clean)
 &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;그래도 안된다면 실제로 중복된 라이브러리를 정렬 혹은 정리가 필요하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] Error querying database. Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection, 데이터베이스 접속 에러</title>
      <link>http://localhost:1313/posts/92/</link>
      <pubDate>Thu, 25 Jul 2024 13:29:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/92/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/92/img.png&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;Amazon RDS and Amazon Aurora SSL/TLS 인증서를 업데이트 후 별다른 설정 변경을 하지 않았지만, 오랜만에 빌드하는 스프링부트 프로젝트의 데이터베이스 연결이 되지 않는 현상 발생하였다.
 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[### Error querying database. Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is org.postgresql.util.PSQLException: FATAL: no pg_hba.conf entry for host &amp;ldquo;{host}&amp;rdquo;, user &amp;ldquo;{user}&amp;rdquo;, database &amp;ldquo;{database}&amp;rdquo;, no encryption ]
 &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;RDS 인증서 업데이트 작업 후 SSL 요구설정이 활성화된 것으로, 해당 에러가 나며 접속이 안된다면 다음과 같이 조치할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 스프링부트 3, 스프링 시큐리티 6, 로그인 세션 유지, 로그인 풀림</title>
      <link>http://localhost:1313/posts/59/</link>
      <pubDate>Fri, 02 Feb 2024 12:33:34 +0000</pubDate>
      <guid>http://localhost:1313/posts/59/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;문제-상황&#34; style=&#34;color: #3a4954; text-align: start;&#34; ke-size=&#34;size26&#34;&gt;1. 문제 상황&lt;/h2&gt;
&lt;p&gt;스프링 부트 3, 스프링 시큐리티 6 업데이트가 되며 기존에 사용 중인 WebSecurityConfigurerAdapter를 더 이상 지원하지 않기에&lt;/p&gt;
&lt;p&gt;기존의 WebSecurityConfigurerAdapter를 상속받아 기능을 구현하는 대신 컴포넌트화 시켜서 구현해야한다.&lt;/p&gt;
&lt;p&gt;SecurityFilterChain으로 스프링 시큐리티를 구현 중&lt;/p&gt;
&lt;p&gt;(antMacher -&amp;gt; requestMacher, dispatcherTypeMatcher설정 등 기본 Spring Security6.0 &lt;a href=&#34;https://docs.spring.io/spring-security/reference/5.8/migration/index.html&#34;&gt;마이그레이션 가이드&lt;/a&gt;는 적용 완료
)&lt;/p&gt;
&lt;p&gt;SecurityContext에 로그인 시도 시 정상적으로 인증정보를 바인딩하고 있으나, 페이지 이동 시 인증정보가 없어지는 현상 발생&lt;/p&gt;
&lt;h2 id=&#34;해결&#34; style=&#34;color: #3a4954; text-align: start;&#34; ke-size=&#34;size26&#34;&gt;2. 해결&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ebnf&#34; data-lang=&#34;ebnf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SecurityContextPersistenceFilter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SecurityContext의 영속성을 컨트롤하는 SecurityContextPersistenceFilter의 설정이 누락되어 있었다. &lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 스프링부트 3 jstl 적용(maven), (절대 URI인 [http://java.sun.com/jsp/jstl/core]을(를), web.xml 또는 이 애플리케이션과 함께 배치된 JAR 파일 내에서 찾을 수 없습니다.)</title>
      <link>http://localhost:1313/posts/58/</link>
      <pubDate>Wed, 31 Jan 2024 16:40:43 +0000</pubDate>
      <guid>http://localhost:1313/posts/58/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;문제-상황&#34; style=&#34;color: #3a4954; text-align: start;&#34; ke-size=&#34;size26&#34;&gt;1. 문제 상황&lt;/h2&gt;
&lt;p&gt;스프링부트 3 버전 업데이트 중 jstl URI / 라이브러리를 찾지 못하는 현상 발생&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://java.sun.com/jsp/jstl/core&#34;&gt;http://java.sun.com/jsp/jstl/core&lt;/a&gt;]을(를), web.xml 또는 이 애플리케이션과 함께 배치된 JAR 파일 내에서 찾을 수 없습니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;해결&#34; style=&#34;color: #3a4954; text-align: start;&#34; ke-size=&#34;size26&#34;&gt;2. 해결&lt;/h2&gt;
&lt;p&gt;타 라이브러리와 동일하게 javax -&amp;gt; jakarta 기반 jstl maven dependency를 추가해주면 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;jakarta.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jakarta.servlet-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;6.0.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;jakarta.servlet.jsp&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.0.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>[Spring] Java 21 롬복(lombok) 버전 설정 (java: java.lang.NoSuchFieldError: Class com.sun.tools.javac.tree.JCTree$JCImport does not have member field &#39;com.sun.tools.javac.tree.JCTree qualid&#39;)</title>
      <link>http://localhost:1313/posts/57/</link>
      <pubDate>Wed, 31 Jan 2024 10:35:34 +0000</pubDate>
      <guid>http://localhost:1313/posts/57/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;문제-상황&#34; style=&#34;color: #3a4954; text-align: start;&#34; ke-size=&#34;size26&#34;&gt;1. 문제 상황&lt;/h2&gt;
&lt;p&gt;JDK21 버전 업 중 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java: java.lang.NoSuchFieldError: Class com.sun.tools.javac.tree.JCTree$JCImport does not have member field &#39;com.sun.tools.javac.tree.JCTree qualid&#39;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;라는 에러와 함께 빌드 실패&lt;/p&gt;
&lt;h2 id=&#34;해결&#34; style=&#34;color: #3a4954; text-align: start;&#34; ke-size=&#34;size26&#34;&gt;2. 해결&lt;/h2&gt;
&lt;p&gt;JDK21과 호환되지 않는 롬복(lombok) 버전 문제로 확인, (JDK21과 호환되는 최소 롬복(lombok) 버전은 &lt;strong&gt;1.18.30이다.)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&amp;gt;
&amp;lt;dependency&amp;gt;
     &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;1.18.30&amp;lt;/version&amp;gt;
          &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;기존 사용 중인 구버전 롬복(lombok)을 작성일 기준 최신버전이자 JDK21 호환 최소 버전인 1.18.30으로 변경해 주면 정상적으로 빌드가 된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] Java 21 외장 톰캣 버전 설정</title>
      <link>http://localhost:1313/posts/52/</link>
      <pubDate>Mon, 18 Dec 2023 14:13:48 +0000</pubDate>
      <guid>http://localhost:1313/posts/52/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;문제-상황&#34; ke-size=&#34;size26&#34;&gt;1. 문제 상황&lt;/h2&gt;
&lt;p&gt;Java21 버전 업 중, 인텔리제이 내장 톰캣으로는 정상적으로 실행되지만, 커스텀 옵션을 사용 중인 외장톰캣을 그대로 사용 시 정상적으로 구동되지 않는 현상이 발견되었다.&lt;/p&gt;
&lt;h2 id=&#34;해결&#34; ke-size=&#34;size26&#34;&gt;2. 해결&lt;/h2&gt;
&lt;p&gt;먼저, 빌드 및 path 등 기존 설정들은 문제가 없는 것을 확인하였고, 로컬 톰캣에서 정상적으로 구동됨을 확인하였기에 다른 부분을 추가로 확인해 보았다. 버전업 영향도 파악기간 중 기존에 톰캣 8.5 버전과 호환되는 것을 확인하였으나, 공식 홈페이지에서 재확인해보았다.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/52/img.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;톰캣 8.5 버전의 자바 지원버전을 보면 &amp;quot;7 and later&amp;quot;로 되어있어 7 이후 버전을 다 사용 가능한 것으로 이해했었으나, 다른 버전을 시도.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] Spring Security6 filterchain 사용시 jsp 뷰 렌더링 설정</title>
      <link>http://localhost:1313/posts/51/</link>
      <pubDate>Mon, 18 Dec 2023 13:09:08 +0000</pubDate>
      <guid>http://localhost:1313/posts/51/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;현상&#34; ke-size=&#34;size26&#34;&gt;1. 현상&lt;/h2&gt;
&lt;p&gt;스프링부트 3.*.* 버전 업을 하며 Spring Security6으로 업데이트 중이다.&lt;/p&gt;
&lt;p&gt;더 이상 지원하지 않는 WebSecurityConfigurerAdapter를 SecurityFilterChain으로 변경 시 포워딩되는 jsp 파일 경로가 필터에 걸려 노출되지 않는 현상이 발생하였다.&lt;/p&gt;
&lt;h3 id=&#34;기존-샘플-소스&#34; ke-size=&#34;size23&#34;&gt;1-1. 기존 샘플 소스&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Configuration
public class SecurityConfig  {
    @Bean
    public SecurityFilterChain config(HttpSecurity http) throws Exception {
       http.authorizeHttpRequests((auth) -&amp;gt; auth
          .requestMatchers(&amp;#34;/&amp;#34;).permitAll()
          .anyRequest().authenticated()
      );

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;기존과 같이 &amp;ldquo;/&amp;rdquo; 경로에 대한 권한을 부여하였지만, jsp 경로에 대한 권한부족으로 페이지 접근에 실패하였다.&lt;/p&gt;
&lt;h2 id=&#34;원인&#34; ke-size=&#34;size26&#34;&gt;2. 원인 &lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Security 5.8 and earlier only&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 순환참조란? The dependencies of some of the beans in the application context form a cycle</title>
      <link>http://localhost:1313/posts/47/</link>
      <pubDate>Fri, 17 Nov 2023 14:36:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/47/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/47/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;순환참조란&#34; ke-size=&#34;size26&#34;&gt;1. 순환참조란?&lt;/h2&gt;
&lt;p&gt;순환참조는 맞물린 의존성 주입 (DI) 상태에서 어떤 빈을 먼저 생성할지 결정하지 못해서 생기에 발생한다. BeanA에서 BeanB를 참조(BeanA-&amp;gt;BeanB) 일 경우 스프링은 BeanB를 먼저 생성 후 BeanA를 생성하기에, BeanB에서 다시 BeanA를 참조할 경우 (BeanA-&amp;gt;BeanB-&amp;gt;BeanA) 순환 참조가 발생하게된다. &lt;/p&gt;
&lt;h2 id=&#34;의존성-주입&#34; ke-size=&#34;size26&#34;&gt;2. 의존성 주입 &lt;/h2&gt;
&lt;p&gt;의존성 주입의 3가지 상황 (생성자 주입방식, 필드 주입방식, Setter주입)에서 순환참조가 발생할수 있다. 다음 포스트 각각의 상세 내용을 확인할 수 있고, 이번 포스트에서는 각각의 경우에 순환참조가 발생하면 어떤 차이점이 있는지 확인해 보자.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 단위 테스트, JUnit의 개념 및 단위 테스트 코드 작성 방법</title>
      <link>http://localhost:1313/posts/45/</link>
      <pubDate>Tue, 14 Nov 2023 15:36:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/45/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/45/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;단위-테스트&#34; style=&#34;color: #000000; text-align: start;&#34; ke-size=&#34;size26&#34;&gt;1. 단위 테스트&lt;/h2&gt;
&lt;p&gt;하나의 모듈을 기준으로 독립적으로 진행되는 가장 작은 단위의 테스트이다. 통합 테스트의 경우 시스템을 구성하는 컴포넌트들이 커질수록 테스트 시간이 길어지지만, 단위 테스트의 경우 해당 부분만 독립적으로 테스트하기에 코드의 변경이 있어도 빠르게 문제 여부를 확인할 수 있다. CleanCode 책에 의하면 깨끗한 테스트 코드는 다음 5가지 규칙을 따라야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fast -&lt;/strong&gt; 빠르게 동작하여 자주 돌릴 수 있어야 한다.&lt;br&gt;
&lt;strong&gt;Independent -&lt;/strong&gt; 테스트는 독립적이며 서로 의존해서는 안된다.&lt;br&gt;
&lt;strong&gt;Repeatable -&lt;/strong&gt;  어느 환경에서도 반복이 가능해야 한다.&lt;br&gt;
&lt;strong&gt;Self-validating -&lt;/strong&gt; 테스트는 성공 또는 실패로 결과를 내어 자체 검증되어야 한다.&lt;br&gt;
&lt;strong&gt;Timely -&lt;/strong&gt; 테스트는 적시에, 테스트하려는 실제코드를 구현하기 직전에 구현해야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 스프링 컨테이너(Spring container)의 개념</title>
      <link>http://localhost:1313/posts/43/</link>
      <pubDate>Tue, 07 Nov 2023 16:45:10 +0000</pubDate>
      <guid>http://localhost:1313/posts/43/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;스프링-컨테이너spring-container란&#34; ke-size=&#34;size26&#34;&gt;1. 스프링 컨테이너(Spring container)란?&lt;/h2&gt;
&lt;p&gt;스프링 프레임워크의 핵심 컴포넌트이며 주요한 용도는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체의 생명주기 관리&lt;/li&gt;
&lt;li&gt;생성된 객체들의 추가적인 기능 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스프링에서는 자바 객체를 빈(Bean)이라고 하며 컨테이너는 내부의 빈 라이프사이클(생성, 제거 등)을 하며 추가 기능을 제공한다. 기존 스프링에서는 xml 파일로 설정하나 스프링 부트에서는 자바 클래스에서 설정가능하다. 주요 설정으로는
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[수동]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Configuration -&lt;/strong&gt; 어플리케이션 구성정보를 등록&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Bean -&lt;/strong&gt; 메서드를 모두 호출하여 반환된 객체를 스프링 컨테이너에 등록
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[자동]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@ComponentScan -&lt;/strong&gt; 해당 클레스클래스 패키지와 하위의 @Component, @Service, @Repository, @Controller 클래스를 탐색하여 빈등록 &lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] IoC(제어의 역전) &amp; DI(의존성 주입)의 개념</title>
      <link>http://localhost:1313/posts/42/</link>
      <pubDate>Mon, 06 Nov 2023 14:20:06 +0000</pubDate>
      <guid>http://localhost:1313/posts/42/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;ioc-inversion-of-control-제어의-역전&#34; ke-size=&#34;size26&#34;&gt;1. IoC (Inversion of Control) 제어의 역전&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/42/img.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;IoC란 메인 프로그램에서 컨테이너나 프레임워크로 객체와 객체의 의존성에 대한 제어를 넘기는 것을 말한다. 프레임워크 없이 개발할 때는 각 객체에 대한 라이프사이클 (생성, 설정, 초기화, 호출 등)을 개발자가 직접 관리한다. 하지만 프레임워크를 사용하면 객체의 생명주기를 프레임워크에 위임하여, 프레임워크가 개발자의 코드를 호출하고 흐름을 제어하게 할 수 있다.
 &lt;/p&gt;
&lt;p&gt;이처럼, 제어의 역전은 객체를 직접 생성하거나 제어하는 것이아니라 외부에서 관리하는 객체를 가져와서 사용하는 것으로, 클레스 간의 결합을 느슨하게 하여 테스트와 유지관리를 더 쉽게 설계하는 원칙이다.
 &lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 스프링부트 &#43; Mybatis 데이터소스 여러개 연결 (스프링 다중 데이터베이스 연결)</title>
      <link>http://localhost:1313/posts/33/</link>
      <pubDate>Fri, 20 Oct 2023 17:57:36 +0000</pubDate>
      <guid>http://localhost:1313/posts/33/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/33/img.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;다음은 스프링부트 + 마이바티스 프로젝트에 2개 이상의 데이터소스를 연결하는 예제이다. &lt;/p&gt;
&lt;p&gt;기존 스프링 데이터베이스 연동이 되어있다고 가정 후 진행되며, 신규 데이터베이스는 구별이 쉽도록 new 데이터베이스로 명칭 한다.&lt;/p&gt;
&lt;h2 id=&#34;신규-데이터베이스-접속정보-추가&#34; ke-size=&#34;size26&#34;&gt;1. 신규 데이터베이스 접속정보 추가&lt;/h2&gt;
&lt;p&gt;추가될 데이터베이스의  속성을 &lt;strong&gt;application.properties&lt;/strong&gt;에 추가&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#기존 DB Setting
spring.datasource.url={url}
spring.datasource.driverClassName={driverClassName}
spring.datasource.username={username}
spring.datasource.password={password}
spring.datasource.schema={schema}

#추가될 DB Setting
new.datasource.url={url}
new.datasource.driverClassName={driverClassName}
new.datasource.username={username}
new.datasource.password={password}
new.datasource.schema={schema}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;데이터베이스-연결-빈-속성-추가&#34; ke-size=&#34;size26&#34;&gt;2. 데이터베이스 연결 빈 속성 추가&lt;/h2&gt;
&lt;p&gt;기존 데이터베이스 연결 설정을 하는 &lt;strong&gt;DatabaseConfig.java&lt;/strong&gt; 외에 &lt;strong&gt;NewDatabaseConfig.java&lt;/strong&gt;신규로 추가한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;기존 DatabaseConfig.java&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 스프링 배치 ItemReader의 개념, (MybatisCursorItemReader, MybatisPagingItemReader 구현)</title>
      <link>http://localhost:1313/posts/32/</link>
      <pubDate>Thu, 19 Oct 2023 18:20:45 +0000</pubDate>
      <guid>http://localhost:1313/posts/32/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/32/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;itemreader란&#34; ke-size=&#34;size26&#34;&gt;1. ItemReader란?&lt;/h2&gt;
&lt;p&gt;스프링 배치의 ItemReader는 다음과 같은 과정을 거쳐 데이터를 처리한다.
 &lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/32/img_1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;대부분의 데이터 형태는 이미 ItemReader로 제공하고 있기에 ItemReader, ItemStream 인터페이스 자체를 구현할 필요는 없다.&lt;/p&gt;
&lt;p&gt;ItemReader는 Chunk 기반 트랜잭션을 다루며 Cursor, Paging 가 대표적인 2가지 방식이다.&lt;/p&gt;
&lt;h2 id=&#34;cursor-paging-형식&#34; ke-size=&#34;size26&#34;&gt;2. Cursor, Paging 형식&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/32/img_2.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cursor기반-itemreader&#34; ke-size=&#34;size23&#34;&gt;2-1. Cursor기반 ItemReader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JDBC ResultSet의 기본 기능이다.&lt;/li&gt;
&lt;li&gt;ResultSet이 Open 될 때마다 데이터베이스의 데이터가 반환된다.&lt;/li&gt;
&lt;li&gt;데이터베이스와 연결 맺은 후 데이터를 Streaming 방식으로 I/O이다.&lt;/li&gt;
&lt;li&gt;현재 행에서Cursor를 유지하며 다음 데이터를 호출하면 Cursor를 한 칸씩 옮기면서 데이터를 가져온다.&lt;/li&gt;
&lt;li&gt;하나의 Connection으로 배치가 끝날때까지 사용되기에 Batch가 끝나기 전에 데이터베이스와 애플리케이션의 연결이 먼저 끊어질 수 있어 데이터베이스와 SocketTimeout을 충분한 값으로 설정하여야 한다.&lt;/li&gt;
&lt;li&gt;모든 결과를 메모리에 할당 하기 때문에 메모리 사용량이 많아진다.&lt;/li&gt;
&lt;li&gt;Chunk 사이즈 만큼의 트랜잭션 단위로 데이터를 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cursor 기반 ItemReader 구현체&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 스프링 트랜잭션의 개념 및 적용 (@Transactional 사용법)</title>
      <link>http://localhost:1313/posts/29/</link>
      <pubDate>Tue, 17 Oct 2023 18:37:56 +0000</pubDate>
      <guid>http://localhost:1313/posts/29/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/29/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;트랜잭션이란&#34; ke-size=&#34;size26&#34;&gt;트랜잭션이란?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://junhkang.tistory.com/20&#34;&gt;[Postgresql] - [PostgreSQL] 트랜잭션(Transaction)의 개념 및 사용&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;스프링에서-제공하는-트랜잭션&#34; ke-size=&#34;size26&#34;&gt;스프링에서 제공하는 트랜잭션&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;◆ 동기화 (Synchronization)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;트랜잭션을 시작하기 위한 Connection 객체를 특별 저장소에 보관하고 필요할 때 쓸 수 있도록 한다.&lt;/p&gt;
&lt;p&gt;작업 쓰레드마다 Connection 객체를 독립적으로 관리하기에 멀티 스레드 환경에서도 충돌이 발생하지 않는다. 하지만 JDBC가 아닌 Hiberate 같은 기능을 사용한다면 JDBC 종속적인 트랜잭션 동기화 코드들은 문제가 발생한다. 대표적으로 Hibernate는 Connection이 아니라 Session 객체를 사용하기 때문이다. 이를 해결하기 위해 트랜잭션 관리 부분을 추상화한 기술을 제공하고 있다.
 &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
