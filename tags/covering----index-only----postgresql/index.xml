<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Covering  - Index-Only  - PostgreSQL on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/covering----index-only----postgresql/</link>
    <description>Recent content in Covering  - Index-Only  - PostgreSQL on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 13 Mar 2024 18:52:22 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/covering----index-only----postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>\\[PostgreSQL\\] Index-Only 스캔과 Covering 인덱스, Index-only스캔의 효율적인 사용
</title>
      <link>http://localhost:1313/posts/70/</link>
      <pubDate>Wed, 13 Mar 2024 18:52:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/70/</guid>
      <description>&lt;h2 id=&#34;postgresql-index-only-스캔과-covering-인덱스-index-only스캔의-효율적인-사용&#34;&gt;[PostgreSQL] Index-Only 스캔과 Covering 인덱스, Index-only스캔의 효율적인 사용&lt;/h2&gt;
&lt;p&gt;Postgresql&lt;/p&gt;
&lt;h2 id=&#34;1-index-only-scans&#34;&gt;1. Index-Only Scans&lt;/h2&gt;
&lt;p&gt;PostgreSQL의 모든 인덱스는 &lt;strong&gt;&amp;ldquo;보조(Secondary)&amp;rdquo;&lt;/strong&gt; 인덱스이다. 각 인덱스는 테이블의 메인 데이터 영역(테이블의 &lt;strong&gt;heap&lt;/strong&gt; 영역)과 분리되어서 저장된다. 그렇기 때문에 일반적인 인덱스 스캔에서 각 ROW를 찾기 위해서는, index와 heap 영역 모두에 접근하여 데이터를 탐색해야 한다. 보통 WHERE 절 조건에 부합하는 데이터들은&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;인덱스 영역 -&lt;/strong&gt; 서로 가까이 존재하여 정렬된 순서로 빠르게 접근할 수 있다. (인덱스 테이블은 정렬된 상태로 생성)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;heap 영역 -&lt;/strong&gt;  특별한 규칙 없이 어디에서든 분포할 수 있기에 heap 영역을 스캔할 때는 무작위로 접근하게 되어 속도가 느리다.
이 퍼포먼스 문제를 해결하기 위해 PostgreSQL은 힙 영역에 대한 접근 없이 인덱스 내에서만 데이터를 조회하는 &lt;strong&gt;Index-only&lt;/strong&gt; 스캔을 지원한다. 기본 개념은 말 그대로 heap 영역의 참조 없이 index 항목에서 바로 값을 반환하는 것으로 매우 효율적으로 보이지만 몇 가지 제한사항이 있다.&lt;/li&gt;
&lt;li&gt;칼럼에 적용된 인덱스 유형이 &lt;strong&gt;Index-only&lt;/strong&gt; 스캔을 지원해야 한다. (B-tree인덱스는 언제나 지원하고, GiST, SP-GiST는 특정 연산자에 한해서만 지원, 나머지 3가지 인덱스는 지원하지 않는다.)&lt;/li&gt;
&lt;li&gt;인덱스가 각 항목에 대해 원래 데이터 값을 &lt;strong&gt;물리적으로 온전히 저장하거나 재구성&lt;/strong&gt;할 수 있어야 한다. 예를 들어 GIN인덱스가 &lt;strong&gt;Index-only&lt;/strong&gt; 스캔을 지원하지 않는 이유는 각 인덱스가 실제 데이터의 물리적인 값이 아닌 일부 특징 (ex. 최대, 최솟값)만을 가지고 있는 유형의 인덱스 이기 때문이다.&lt;/li&gt;
&lt;li&gt;실행되는 쿼리가 인덱스로 설정된 칼럼만을 조건절에 참조해야 한다. 예를 들어 x, y칼럼에 인덱스가 설정되어 있고, z 칼럼에 인덱스가 설정되어 있지 않다면, 다음 쿼리는 index-only 스캔을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; x, y &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; tab &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; tab &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;반면에 다음 쿼리는 인덱스가 적용되지 않은 z 칼럼이 조건절, 혹은 target에 포함되어 있기에 index-only 스캔 사용이 불가능하다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
