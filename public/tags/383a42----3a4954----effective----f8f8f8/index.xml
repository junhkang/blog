<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>383a42  - 3a4954  - Effective  - F8f8f8 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/383a42----3a4954----effective----f8f8f8/</link>
    <description>Recent content in 383a42  - 3a4954  - Effective  - F8f8f8 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/383a42----3a4954----effective----f8f8f8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[이펙티브 자바] 3. private 생성자나 열거 타입으로 싱글턴임을 보장하라</title>
      <link>http://localhost:1313/posts/55/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/55/</guid>
      <description>&lt;p&gt;&lt;code&gt;public class ElvisField { public static final ElvisField INSTANCE = new ElvisField(); private ElvisField() {} public void leaveTheBuilding() { System.out.println(&amp;quot;Whoa baby, I&#39;m outta here!&amp;quot;); } }&lt;/code&gt;
Private 생성자는 public static final 필드인 elvis.instance를 초기화할 때 딱 한 번만 호출된다. public, protected 생성자가 없기에 초기화 시 생성된 인스턴스가 전체 시스템에서 유일함이 보장된다. 단, 권한이 있는 클라이언트의 경우 리플렉션 API 인 AccessibleObject.setAccessible을 사용해 private 생성자를 호출가능하다, 이 경우를 방지하기 위해서는 생성자를 수정하여 두 번째 객체가 되려 할 때 Exception을 던지면 된다. 리플렉션 API를 통해 새로운 객체가 생성되는 것을 확인해 보면
&lt;code&gt;public static void main(String[] args) { ElvisField ElvisField1 = ElvisField.INSTANCE; ElvisField ElvisField2 = ElvisField.INSTANCE; System.out.println(ElvisField1.hashCode()); System.out.println(ElvisField2.hashCode()); try { Constructor constructor = ElvisField.class.getDeclaredConstructor(); constructor.setAccessible(true); ElvisField ElvisField3 = constructor.newInstance(); System.out.println(ElvisField3.hashCode()); } catch (Exception e) { throw new RuntimeException(e); } }&lt;/code&gt;
&lt;code&gt;821270929 821270929 1160460865&lt;/code&gt;
기존 ElvisField1, ElvisField2에서는 동일 인스턴스를 반환하지만, 리플렉션 API를 통해 생성하면 새로운 객체가 생성이 된다. 이 경우, 다음과 같이 인스턴스가 이미 존재하는지를 체크하여 예외처리를 하면 싱글턴에 위배되는 상황을 방지할 수 있다.
&lt;code&gt;public class ElvisField { public static final ElvisField INSTANCE = new ElvisField(); private ElvisField() { // private 생성자는 ElvisField.INSTANCE를 초기화할 때 딱 한번만 호출된다. if (INSTANCE != null) { throw new IllegalStateException(&amp;quot;Already initialized&amp;quot;); } } public void leaveTheBuilding() { System.out.println(&amp;quot;Whoa baby, I&#39;m outta here!&amp;quot;); } }&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
