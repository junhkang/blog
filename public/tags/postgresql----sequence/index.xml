<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PostgreSQL  - Sequence on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/postgresql----sequence/</link>
    <description>Recent content in PostgreSQL  - Sequence on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 11 Oct 2023 14:12:44 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/postgresql----sequence/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>\\[PostgreSQL\\] 시퀀스(Sequence)의 개념과 사용법(생성, 삭제, 조회 등)
</title>
      <link>http://localhost:1313/posts/23/</link>
      <pubDate>Wed, 11 Oct 2023 14:12:44 +0000</pubDate>
      <guid>http://localhost:1313/posts/23/</guid>
      <description>&lt;h2 id=&#34;postgresql-시퀀스sequence의-개념과-사용법생성-삭제-조회-등&#34;&gt;[PostgreSQL] 시퀀스(Sequence)의 개념과 사용법(생성, 삭제, 조회 등)&lt;/h2&gt;
&lt;p&gt;Postgresql&lt;/p&gt;
&lt;figure class=&#34;imageblock alignCenter&#34;&gt;
&lt;span data-lightbox=&#34;lightbox&#34;&gt; &lt;img src=&#34;http://localhost:1313/images/posts/23/img.png&#34; /&gt; &lt;/span&gt;
&lt;/figure&gt;
## 1. 시퀀스(Sequence)의 사용
###           1-1. 생성, 삭제, 조회
``` sql
-- 101부터 시작하는 기본 시퀀스 생성
CREATE SEQUENCE serial START 101;
-- 시퀀스 다음값 조회
SELECT nextval(&#39;serial&#39;);
-- 시퀀스 현재값 조회
select currval(&#39;serial&#39;);
-- 시퀀스 삭제
DROP SEQUENCE serial;
-- 시퀀스로 INSERT하기
INSERT INTO distributors VALUES (nextval(&#39;serial&#39;), &#39;nothing&#39;);
-- COPY FROM 후에 시퀀스 시작값 변경하기
BEGIN;
COPY distributors FROM &#39;input_file&#39;;
SELECT setval(&#39;serial&#39;, max(id)) FROM distributors;
END;
-- Synopsis
CREATE [ TEMPORARY | TEMP ] SEQUENCE [ IF NOT EXISTS ] 이름
    [ AS 자료형 ]
    [ INCREMENT [ BY ] 증가값 ]
    [ MINVALUE 최소값 | NO MINVALUE ] [ MAXVALUE 최대값 | NO MAXVALUE ]
    [ START [ WITH ] 시작값 ] [ CACHE 캐시 ] [ [ NO ] CYCLE ]
    [ OWNED BY { 테이블이름.칼럼이름 | NONE } ]
```
###           1-2. 사용 중인 시퀀스 확인
``` sql
select n.nspname as sequence_schema, 
          c.relname as sequence_name,
          u.usename as owner
from pg_class c 
     join pg_namespace n on n.oid = c.relnamespace
     join pg_user u on u.usesysid = c.relowner
where c.relkind = &#39;S&#39;
     and u.usename = current_user;
```
## 2. 시퀀스 생성시 상세 옵션
**- TEMPORARY or TEMP**
        현재 세션에서만 사용하는 시퀀스를 생성하며, 세션이 종료되면 시퀀스는 자동 삭제된다.
**- IF NOT EXISTS**
&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;동일명의 시퀀스가 있다면 알림만 보여주고 작업은 생략한다.
**- AS 자료형**
&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;시퀀스의 자료형을 설정한다. &lt;/span&gt;smallint&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;, &lt;/span&gt;integer&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;, and &lt;/span&gt;bigint&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt; 세 종류로 &lt;/span&gt;bigint&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;형이 기본값이다.&lt;/span&gt;
**&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;- INCREMENT BY 증가값&lt;/span&gt;**
&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;시퀀스 채번식 증가값을 더하여 구한다. 양수라면 증가 시퀀스, 음수면 감소시퀀스이다. default는 1이다.&lt;/span&gt;
**&lt;span style=&#34;background-color: #ffffff;&#34;&gt;- MINVALUE / NO MINVALUE&lt;/span&gt;**
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;해당 시퀀스의 최솟값을 설정한다. 기본 값은 1이며, 감소 시퀀스의 경우 해당 자료형의 최솟값이다.&lt;/span&gt;
**&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;- &lt;/span&gt;MAXVALUE / NO MAXVALUE&lt;/span&gt;**
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;해당 시퀀스의 최댓값을 설정한다. 기본값은 해당 자료형의 최댓값이다. 감소 시퀀스의 경우 -1이다.&lt;/span&gt;
**&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;- &lt;/span&gt;START WITH&lt;/span&gt;**
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;시퀀스의 시작값을 설정한다. 기본값은 증가시퀀스의 경우 최솟값이며, 감소 시퀀스는 최댓값이다.&lt;/span&gt;
**&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;- &lt;/span&gt;CACHE&lt;/span&gt;**
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;시퀀스 채번을 빠르게 하기 위해 메모리에서만 처리하는 캐시값이다.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;기본값은 1이며 캐시를 사용하지 않고 매번 디스크를 사용함을 뜻한다.&lt;/span&gt;
**&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;- &lt;/span&gt;CYCLE / NO CYCLE&lt;/span&gt;**
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;시퀀스가 최댓값/최솟값에 도달했을 때 순환하며 다시 시작한다.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;NO CYCLE의 경우 최솟값/최댓값에 도달하면 에러로 처리한다.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;기본 설정은 NO CYCLE이다.&lt;/span&gt;
**&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;background-color: #ffffff; color: #000000; text-align: start;&#34;&gt;- &lt;/span&gt;OWNED BY / OWNED BY NONE&lt;/span&gt;**
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;해당 칼럼과 시퀀스의 의존관계를 생성한다.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;테이블/칼럼이 삭제되면 시퀀스는 자동으로 삭제되며, 테이블/시퀀스의 소유자가 같아야 한다.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;span style=&#34;color: #333333; text-align: start;&#34;&gt;        &lt;/span&gt;OWNED BY NONE이 기본 옵션이며 어떠한 의존관계도 없는 상태이다.&lt;/span&gt;
## 3. 시퀀스의 개념
CREATE SEQUENCE는 일련번호 생성기인 SEQUENCE를 생성한다. 시퀀스를 생성하면, 내부적으로 지정한 명칭으로 단일 로우의 특수 테이블을 만들고, 그 로우의 값을 초기화한다. 시퀀스는 특수 용도의 &#34;테이블&#34; 이기 때문에 다음과 같은 쿼리를 사용할 수 있지만,
``` sql
SELECT * FROM seq_name;
```
&lt;figure class=&#34;imageblock alignCenter&#34;&gt;
&lt;span data-lightbox=&#34;lightbox&#34;&gt; &lt;img src=&#34;http://localhost:1313/images/posts/23/스크린샷%202023-10-11%20오후%201.28.47.png&#34; /&gt; &lt;/span&gt;
&lt;/figure&gt;
이 테이블을 직접 조작하면 &lt;span grammar=&#34;{&amp;quot;input&amp;quot;:&amp;quot;안되며,&amp;quot;,&amp;quot;output&amp;quot;:&amp;quot;안 되며,&amp;quot;,&amp;quot;etype&amp;quot;:&amp;quot;space&amp;quot;}&#34; grammar-id=&#34;grammar2&#34; grammar-focus=&#34;false&#34;&gt;안되며,&lt;/span&gt; 결과에서 last_value (nextval)은 &#34;실행 시점&#34;의 최신 값이다. (그 후로는 다른 세션에서 호출되어 바뀌었을 수도 있는 값이다.)
## 4. 시퀀스의 특징
- 시퀀스명은 시퀀스 / 테이블 / 인덱스 / 뷰 명과 겹칠 수 없다.
- 시퀀스는 기본적으로 bigint형으로 계산한다. (-9223372036854775808 ~ 9223372036854775807)
- nextval, setval은 취소가 되지 않는다. 때문에 연속되지 않는 일련번호를 처리하는 용도로 사용할 수 없고, 락을 통해 구현은 가능하지만 시퀀스를 사용하지 않는 것보다 더 높은 코스트가 소모된다. 특히 동시 접속 많은 서비스라면 더 비효율적이다.
## 5. CACHE 옵션
###           5-1. CACHE 옵션이란?
CACHE 옵션을 사용하는 경우 다중 세션에서 시퀀스가 순차적으로 채번 되지 않는다. 각세션 별로 캐시값만큼 생략 후 그다음 세션시작번호를 채번 한다. (last_Value +캐시-1) 즉 시퀀스 캐시는 한 세션 내의 캐시를 의미한다. 이를 통해 다른 세션에서 이전 세션에서 미사용 한 일련번호를 사용할 수 없도록 하고, 그렇기 때문에 시퀀스가 연속적이지 않는 경우가 종종 발생한다.
###           5-2. CACHE 옵션 &lt;span grammar=&#34;{&amp;quot;input&amp;quot;:&amp;quot;사용시&amp;quot;,&amp;quot;output&amp;quot;:&amp;quot;사용 시&amp;quot;,&amp;quot;etype&amp;quot;:&amp;quot;space&amp;quot;}&#34; grammar-id=&#34;grammar3&#34; grammar-focus=&#34;false&#34;&gt;사용시&lt;/span&gt; 주의 사항 
캐시를 사용하면 시퀀스가 크다는 의미가 꼭 나중에 생성된 데이터라는 보장이 없다. 그렇기에 순차적 시퀀스를 사용해야 하는 경우라면 캐시값을 1로 설정해야 만한다. 예를 들어
&gt; 캐시값은 10으로 설정할 경우  
&gt; - A 세션이 1~10 시퀀스를 선점  
&gt; - B 세션이 11~20 시퀀스를 선점  
&gt; 이 상태에서 B세션에서 더 빨리 시퀀스를 호출하더라도 A세션의 1~10 시퀀스보다 낮은 값을 가질 수 없기 때문이다.  
&gt;   
&gt; (CACHE를 사용하더라도 유니크한 시퀀스를 채번함에는 전혀 지장이 없기에, 순차적 의미로써 시퀀스를 사용할 것이 아니라면 사용하여도 무관하다.)
&lt;span style=&#34;color: #000000;&#34;&gt;&lt;span style=&#34;background-color: #ffffff;&#34;&gt;참고&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&lt;span style=&#34;background-color: #ffffff;&#34;&gt;&lt;a href=&#34;https://www.postgresql.kr/docs/10/sql-createsequence.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.postgresql.kr/docs/10/sql-createsequence.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;
\#Sequence \#PostgreSQL</description>
    </item>
  </channel>
</rss>
