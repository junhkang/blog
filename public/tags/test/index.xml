<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Test on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/test/</link>
    <description>Recent content in Test on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Sun, 22 Sep 2024 17:59:07 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Spring] 테스트 4 - 얼마나 깊게 테스트 코드를 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/99/</link>
      <pubDate>Sun, 22 Sep 2024 17:59:07 +0000</pubDate>
      <guid>http://localhost:1313/posts/99/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;how-deep---얼마나-깊게-테스트-코드를-작성해야-하는가&#34; ke-size=&#34;size26&#34;&gt;4. HOW DEEP - 얼마나 깊게 테스트 코드를 작성해야 하는가?&lt;/h2&gt;
&lt;h3 id=&#34;테스트-깊이를-결정하는-기준&#34; ke-size=&#34;size23&#34;&gt;4.1 테스트 깊이를 결정하는 기준&lt;/h3&gt;
&lt;p&gt;테스트 깊이를 설정할 때는 다음과 같은 기준을 고려해야 합니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;테스트 피라미드(Test Pyramid)&lt;/strong&gt;: 테스트 피라미드는 테스트 종류에 따른 계층 구조를 보여줍니다. 일반적으로 단위 테스트가 가장 많고, 그다음으로 통합 테스트, 시스템 또는 E2E(End-to-End) 테스트가 위치합니다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;단위 테스트(Unit Tests)&lt;/strong&gt;: 가장 많은 비중을 차지하며, 작은 코드 단위를 독립적으로 테스트합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;통합 테스트(Integration Tests)&lt;/strong&gt;: 여러 모듈이 상호작용하는지 테스트합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E2E 테스트(End-to-End Tests)&lt;/strong&gt;: 실제 사용자 관점에서 전체 시스템이 잘 작동하는지 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;위험 기반 테스트(Risk-Based Testing)&lt;/strong&gt;: 비즈니스 중요도와 잠재적 위험 요소에 따라 테스트 우선순위를 설정합니다. 비즈니스에 중요한 기능이나 리스크가 높은 부분에 대한 테스트는 더 깊이 있게 수행합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;유스 케이스 기반 테스트&lt;/strong&gt;: 핵심 사용자 흐름과 엣지 케이스를 기반으로 테스트를 작성합니다. 실제로 사용자가 자주 사용하는 기능이나 예외적인 상황에서의 동작을 검증하는 것이 중요합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;현실적인 제약과 팀 역량 고려&lt;/strong&gt;: 모든 부분을 깊이 테스트하는 것은 시간과 리소스 측면에서 비효율적일 수 있습니다. 팀의 역량과 프로젝트 일정 등을 고려하여 테스트 깊이를 조정하는 것이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/99/img.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 테스트 3 - 언제 테스트 코드를 적용해야 하는가?</title>
      <link>http://localhost:1313/posts/98/</link>
      <pubDate>Sun, 22 Sep 2024 17:57:13 +0000</pubDate>
      <guid>http://localhost:1313/posts/98/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;3-when---언제-테스트-코드를-적용해야-하는가&#34;&gt;3. WHEN - 언제 테스트 코드를 적용해야 하는가?&lt;/h1&gt;
&lt;h2 id=&#34;tdd와-bdd의-개념-및-적용-시점&#34; ke-size=&#34;size26&#34;&gt;3.1 TDD와 BDD의 개념 및 적용 시점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TDD (Test-Driven Development)&lt;/strong&gt;: TDD는 테스트를 먼저 작성하고, 그 테스트를 통과할 수 있는 최소한의 코드를 작성하며 개발을 진행하는 방법론입니다. TDD는 테스트를 통해 명확한 요구사항을 확인하고 코드 품질을 보장하는 방법으로 활용됩니다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;레드-그린-리팩터 사이클&lt;/strong&gt;: TDD의 기본 개발 사이클은 &lt;code&gt;레드 단계&lt;/code&gt; (실패하는 테스트 작성) → &lt;code&gt;그린 단계&lt;/code&gt; (테스트를 통과하기 위한 코드 작성) → &lt;code&gt;리팩터 단계&lt;/code&gt; (코드 정리 및 최적화)로 이루어집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적용 시점&lt;/strong&gt;: 새로운 기능을 개발하거나 기존 코드를 리팩터링 할 때, TDD를 통해 코드의 안정성과 유지보수성을 높일 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/98/img.png&#34;&gt;
이미지출처: &lt;a href=&#34;https://medium.com/pilar-2020/applying-test-driven-development-6d6d3af186cbApplying&#34;&gt;https://medium.com/pilar-2020/applying-test-driven-development-6d6d3af186cbApplying&lt;/a&gt;\ Test-Driven\ Development&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 테스트 2 - 테스트 코드를 어떻게 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/97/</link>
      <pubDate>Sun, 22 Sep 2024 17:55:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/97/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;2-how---테스트-코드를-어떻게-작성해야-하는가&#34;&gt;2. HOW - 테스트 코드를 어떻게 작성해야 하는가?&lt;/h1&gt;
&lt;h2 id=&#34;테스트-케이스-선택-방법&#34; ke-size=&#34;size26&#34;&gt;2.1 테스트 케이스 선택 방법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;첫 번째 테스트의 중요성&lt;/strong&gt;: 구현하기 가장 쉬운 테스트부터 시작하는 것이 좋습니다. 예외적인 상황이나 가장 빠르게 개발할 수 있는 테스트 케이스를 먼저 작성하고, 점차 확장해 나갑니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;점진적 확장&lt;/strong&gt;: 쉬운 테스트부터 시작해 점차 복잡한 테스트로 나아가면서 시스템의 안정성을 검증합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tdd-test-driven-development-방법론&#34; ke-size=&#34;size26&#34;&gt;2.2 TDD (Test-Driven Development) 방법론&lt;/h2&gt;
&lt;p&gt;TDD는 테스트 주도 개발 방식으로, 테스트 코드를 먼저 작성하고 이를 기반으로 프로덕션 코드를 작성하는 방식입니다. TDD는 다음과 같은 세 단계를 따릅니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] 테스트 1 - 왜 테스트 코드를 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/96/</link>
      <pubDate>Sun, 22 Sep 2024 17:50:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/96/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/96/img.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-why---왜-테스트를-작성해야-하는가&#34;&gt;1. WHY - 왜 테스트를 작성해야 하는가?&lt;/h1&gt;
&lt;h2 id=&#34;테스트-코드의-중요성&#34; ke-size=&#34;size26&#34;&gt;1.1 테스트 코드의 중요성&lt;/h2&gt;
&lt;p&gt;테스트 코드는 소프트웨어 개발에서 매우 중요한 역할을 합니다. 기능을 수정하거나 새로운 기능을 추가할 때 코드가 안정적으로 작동하는지 확인할 수 있는 수단이 바로 테스트 코드입니다. 이를 통해 예상하지 못한 버그를 방지하고, 코드 품질을 높일 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;테스트-코드-작성의-장점&#34; ke-size=&#34;size26&#34;&gt;1.2 테스트 코드 작성의 장점&lt;/h2&gt;
&lt;h3 id=&#34;안정적인-개발-환경-구축&#34; ke-size=&#34;size23&#34;&gt;1.2.1 안정적인 개발 환경 구축&lt;/h3&gt;
&lt;p&gt;테스트 코드는 코드의 변경이 다른 기능에 미치는 영향을 최소화하는 데 도움을 줍니다. 개발자는 자신 있게 코드를 수정하거나 리팩터링 할 수 있으며, 기존 기능이 예상대로 작동하는지 검증할 수 있습니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
