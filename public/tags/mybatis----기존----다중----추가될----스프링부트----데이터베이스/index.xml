<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mybatis  - 기존  - 다중  - 추가될  - 스프링부트  - 데이터베이스 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/mybatis----%EA%B8%B0%EC%A1%B4----%EB%8B%A4%EC%A4%91----%EC%B6%94%EA%B0%80%EB%90%A0----%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8----%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/</link>
    <description>Recent content in Mybatis  - 기존  - 다중  - 추가될  - 스프링부트  - 데이터베이스 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 20 Oct 2023 17:57:36 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/mybatis----%EA%B8%B0%EC%A1%B4----%EB%8B%A4%EC%A4%91----%EC%B6%94%EA%B0%80%EB%90%A0----%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8----%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>\\[Spring\\] 스프링부트 &#43; Mybatis 데이터소스 여러개 연결 (스프링 다중 데이터베이스 연결)
</title>
      <link>http://localhost:1313/posts/33/</link>
      <pubDate>Fri, 20 Oct 2023 17:57:36 +0000</pubDate>
      <guid>http://localhost:1313/posts/33/</guid>
      <description>&lt;h2 id=&#34;spring-스프링부트--mybatis-데이터소스-여러개-연결-스프링-다중-데이터베이스-연결&#34;&gt;[Spring] 스프링부트 + Mybatis 데이터소스 여러개 연결 (스프링 다중 데이터베이스 연결)&lt;/h2&gt;
&lt;p&gt;Spring&lt;/p&gt;
&lt;figure class=&#34;imageblock alignCenter&#34;&gt;
&lt;span data-lightbox=&#34;lightbox&#34;&gt; &lt;img src=&#34;http://localhost:1313/images/posts/33/img.png&#34; /&gt; &lt;/span&gt;
&lt;/figure&gt;
다음은 스프링부트 + 마이바티스 프로젝트에 2개 이상의 데이터소스를 연결하는 예제이다. 
기존 스프링 데이터베이스 연동이 되어있다고 가정 후 진행되며, 신규 데이터베이스는 구별이 쉽도록 new 데이터베이스로 명칭 한다.
## 1. 신규 데이터베이스 접속정보 추가
추가될 데이터베이스의  속성을 **application.properties**에 추가
``` java
#기존 DB Setting
spring.datasource.url={url}
spring.datasource.driverClassName={driverClassName}
spring.datasource.username={username}
spring.datasource.password={password}
spring.datasource.schema={schema}
#추가될 DB Setting
new.datasource.url={url}
new.datasource.driverClassName={driverClassName}
new.datasource.username={username}
new.datasource.password={password}
new.datasource.schema={schema}
```
## 2. 데이터베이스 연결 빈 속성 추가
기존 데이터베이스 연결 설정을 하는 **DatabaseConfig.java** 외에 **NewDatabaseConfig.java**신규로 추가한다.
**기존 DatabaseConfig.java**
``` java
@Bean(name=&#34;sqlSessionFactory&#34;)
@Primary
public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
    - sessionFactory 설정 -
    return sessionFactory.getObject();
}
@Bean(name=&#34;sqlSessionTemplate&#34;)
@Primary
public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) throws Exception {
    -- sessionTemplate 설정
    return  new SqlSessionTemplate(sqlSessionFactory);
}
@Bean(name=&#34;dataSource&#34;)
@Primary
public DataSource dataSource() {
    - 데이터베이스 연결설정 -
    return new DataSource();
}
```
**신규 추가된 NewDatabaseConfig.java 설정**
``` java
@Bean(name=&#34;newSqlSessionFactory&#34;)
public SqlSessionFactory newSqlSessionFactory(@Qualifier(&#34;newDataSource&#34;) DataSource newDataSource) throws Exception {
    - SqlSessionFactory 설정 -
    return newSessionFactory.getObject();
}
@Bean(name=&#34;newSqlSessionTemplate&#34;)
public SqlSessionTemplate newSqlSessionTemplate(@Qualifier(&#34;newSqlSessionFactory&#34;) SqlSessionFactory newSqlSessionFactory) throws Exception {
    - SqlSessionTemplate 설정 - 
    return new SqlSessionTemplate(newSqlSessionFactory);
}
@Bean(name=&#34;newDataSource&#34;)
public DataSource newDataSource() {
    - 데이터베이스 연결설정 -
    return new DataSource();
}
```
다음 예제대로 **SqlSessionFactory, SqlSessionTemplate, DataSource** 빈만 별도로 등록해 주면 설정한 데이터베이스 주소로 연결이 가능하다.
다만, **NewDatabaseConfig.java**의 빈 설정을 보면 
``` java
public SqlSessionTemplate newSqlSessionTemplate(@Qualifier(&#34;newSqlSessionFactory&#34;) SqlSessionFactory newSqlSessionFactory)
```
다음과 같이 최초 설정에도 **SqlSessionTemplate, SqlSessionFactory** 빈 등록 시 새로 생성된 **SqlSessionFactory, DataSource**를 명시해주지 않는다면 기존 설정의 **@Primary** 설정을 따라 기존사용 중인 데이터베이스 접속 정보를 사용하게 되기에 의존성 주입을 별도로 해주어야 한다. 별도로 명시하지 않을 경우, 최초 빈 등록시 신규 데이터베이스는 컨넥션만 맺은 채로, 신규 데이터베이스 연결 설정도 1번 데이터베이스 연결 설정 빈을 참조하게 된다.
## 3. 데이터소스 설정
추가 데이터베이스 연결 빈 설정이 완료되면 등록된 2개의 데이터 소스 중 접속정보를 선택하여 사용 가능하다.
``` java
private final SqlSessionTemplate sqlSessionTemplate;
private final SqlSessionTemplate newSqlSessionTemplate;
public TestRepository(@Qualifier(&#34;newSqlSessionTemplate&#34;) SqlSessionTemplate sqlSessionTemplate, SqlSessionTemplate sqlSessionTemplate) {
    this.newSqlSessionTemplate = newSqlSessionTemplate;
    this.sqlSessionTemplate = sqlSessionTemplate;
}
--기존 데이터베이스 연결
public Integer connectionTest() throws Exception {
    log.info(newSqlSessionTemplate.getConnection().get~()); -- 접속 정보 확인
    return newSqlSessionTemplate.selectOne(&#34;~.connectionTest&#34;);
}
--신규 데이터베이스 연결
public Integer connectionTest() throws Exception {
    log.info(sqlSessionTemplate.getConnection().get~()); -- 접속 정보 확인
    return sqlSessionTemplate.selectOne(&#34;~.connectionTest&#34;);
}
```
기존 사용중인 데이터베이스 연결 빈 설정값에 **@Primary** 지정을 해주면 기존에 사용 중이던 **SqlSessionTemplate**에 어떤 빈을 사용할지 명시하지 않아도 **@Primary** 지정된 빈 설정을 따라간다. 예제와 같이 **newSqlSessionTemplate**에 의존성 주입을 해주어야 하지만, **sqlSessionTemplate**는 디폴트 설정인 기존 데이터베이스 설정을 사용한다.
\#데이터베이스 \#mybatis \#스프링부트 \#다중 연결</description>
    </item>
  </channel>
</rss>
