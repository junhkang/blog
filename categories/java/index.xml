<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on Jun Kang&#39;s Blog</title>
    <link>https://junhkang.com/categories/java/</link>
    <description>Recent content in Java on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 30 Jan 2024 21:41:20 +0000</lastBuildDate>
    <atom:link href="https://junhkang.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Java] 자바 스트림(Streams)의 개념과 사용 방법</title>
      <link>https://junhkang.com/posts/56/</link>
      <pubDate>Tue, 30 Jan 2024 21:41:20 +0000</pubDate>
      <guid>https://junhkang.com/posts/56/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://junhkang.com/images/posts/56/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;자바-스트림streams이란&#34; ke-size=&#34;size26&#34;&gt;1. 자바 스트림(Streams)이란?&lt;/h2&gt;
&lt;p&gt;기존의 배열 또는 컬렉션 인스턴스는 for, foreach 같은 반복문을 통해 하나씩 핸들링하는 방식이었기에 로직이 복잡할수록 코드양도 많아지고 루프를 여러 번 도는 경우도 발생하였다. 그에 비해 자바 8에서 추가된 스트림(Streams)은 람다를 사용할 수 있는 기술 중 하나로 다음과 같은 특징을 가지고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스트림은 데이터의 흐름이라는 뜻으로 컬렉션에 저장되어 있는 요소들을 하나씩 순회하면서 처리할 수 있는 코드패턴이다.&lt;/li&gt;
&lt;li&gt;함수형 프로그래밍 언어에서 일반적으로 지원하는 연산관 데이터베이스와 비슷한 연산을 지원한다.&lt;/li&gt;
&lt;li&gt;배열/컬렉션의 함수 여러 개를 조합하여 원하는 결과를 필터링, 가공된 결과 추출 가능하며 람다식으로 코드를 간결하게 표현할 수 있다.&lt;/li&gt;
&lt;li&gt;하나의 작업을 둘 이상 작업으로 잘게 쪼개 동시에 처리하며 스레드를 이용하여 많은 요소들을 빠르게 처리 가능한다. &lt;/li&gt;
&lt;li&gt;컬렉션은 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조인데 비해, 스트림은 요청할 때만 요소를 계산하는 고정된 자료 구조이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스트림에 사용에 대한 상세한 내용은 다음 3가지로 나눌 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Java] 가상 스레드 (Virtual Threads)란? 자바 21의 가상스레드 (Virtual Thread) 도입</title>
      <link>https://junhkang.com/posts/37/</link>
      <pubDate>Wed, 25 Oct 2023 16:37:30 +0000</pubDate>
      <guid>https://junhkang.com/posts/37/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;가상-스레드-virtual-threads란&#34; ke-size=&#34;size26&#34;&gt;&lt;strong&gt;1. 가상 스레드 (Virtual Threads)&lt;strong&gt;란?&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;2023.09.20 릴리즈 된 자바 21에 추가된 가상 스레드(Virtual Threads)라는 기능을 살펴보자.&lt;/p&gt;
&lt;p&gt;가상 스레드는 경량 스레드로, 높은 처리량의 동시 어플리케이션을 작성, 유지 및 관찰하는 작업 공수를 크게 줄인다.  OS스레드를 그대로 사용하지 않고 JVM 자체적으로 스케쥴링을 통해 사용할 수 있는 경량 스레드이며, 하나의 프로세스가 수십 - 수백만 스레드를 동시에 실행할수 있도록 설계되었다.&lt;/p&gt;
&lt;h2 id=&#34;자바의-전통적인-스레드&#34; ke-size=&#34;size26&#34;&gt;&lt;strong&gt;2. 자바의 전통적인 스레드&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;자바 개발자들은 근 30년동안 동시성 서버 어플리케이션의 처리를 위해 스레드에 의존해왔다. 모든 메서드의 구문들은 스레드 내부에서 실행되며, 1개의 요청을 1개의 스레드가 처리한다. 대표적으로 스프링은 멀티스레드 구조이기에, 여러 스레드의 실행이 동시에 발생하며 동시 요청이 많아질수록 스레드의 수 역시 증가한다. 각각의 스레드는 지역 변수를 저장하고 메소드 호출을하는 스택을 제공하며, 문제가 생겼을 때의 Context도 제공하는데, 예를들어 Exception은 동일 스레드 내에서의 메소드에 의해 throw/catch 된다. 그렇기 때문에 개발자는 스레드의 Stack trace로 문제를 추적할 수 있는 것이고, 그 외 Debugger (스레드의 메소드 내에서 구문을 차례로 훑어본다), Profiler(JFR) (여러 스레드의 행동을 시각화하여 스레드의 성능을 이해할 수 있도록 도와준다.)도 모두 스레드 기반으로 되어있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Java] Switch와 else-if의 효율성 비교 (Switch와 else-if 중에 어떤 걸 사용해야 할까?)</title>
      <link>https://junhkang.com/posts/36/</link>
      <pubDate>Tue, 24 Oct 2023 18:55:32 +0000</pubDate>
      <guid>https://junhkang.com/posts/36/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://junhkang.com/images/posts/36/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;switch와-if-else&#34; ke-size=&#34;size26&#34;&gt;1. Switch와 if-else&lt;/h2&gt;
&lt;p&gt;조건에 따라 실행을 분기해야 할 때 우리는 조건문을 사용한다. Java에서는 switch / if-else 두 조건문을 선택적으로 사용 가능하다. 보통 가독성을 기준으로 선택을 많이 하나, 효율성 기준에서 어떤 것을 선택하는 것이 좋을지 비교해보려 한다.
 &lt;/p&gt;
&lt;p&gt;일단 switch 구분에서 Strings를 사용하는 것에 관한 공식문서를 보면,
 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;switch&lt;/strong&gt; statement compares the &lt;strong&gt;String&lt;/strong&gt; object in its expression with the expressions associated with each &lt;strong&gt;case&lt;/strong&gt; label as if it were using the &lt;strong&gt;String.equals&lt;/strong&gt; method; consequently, the comparison of &lt;strong&gt;String&lt;/strong&gt; objects in &lt;strong&gt;switch&lt;/strong&gt; statements is case sensitive. The Java compiler generates generally more efficient bytecode from &lt;strong&gt;switch&lt;/strong&gt; statements that use &lt;strong&gt;String&lt;/strong&gt; objects than from chained &lt;strong&gt;if-then-else&lt;/strong&gt; statements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Java] 클래스 로딩 과정(Java Class Loading Process)이란?</title>
      <link>https://junhkang.com/posts/35/</link>
      <pubDate>Mon, 23 Oct 2023 17:30:32 +0000</pubDate>
      <guid>https://junhkang.com/posts/35/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;클래스-로딩-과정-java-class-loading-process-이란&#34; ke-size=&#34;size26&#34;&gt;&lt;strong&gt;1. 클래스 로딩 과정 (Java Class Loading Process) 이란?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;자바 클래스 로딩 과정 (Java Class Loading Process)은 클래스 로더가 클래스 파일을 찾아 동적으로 JVM의 메모리 영역인 Runtime Data Areas에 올려놓는 과정을 말한다.
 &lt;/p&gt;
&lt;p&gt;자바에서 객체가 어떻게 형성/관리 되는지 이해하려면. java 파일의 소스코드가 어떻게 JVM 위에 로딩되는지 아는 것이 중요하고, 클래스 로딩할 때 발생하는 문제 (&amp;lsquo;java.lang.ClassNotFoundException&#39;과 같은 에러)를 쉽게 해결하고, 코드상 동적으로 클래스 로딩하는 구문 이해하는데 필요하다.&lt;/p&gt;
&lt;h2 id=&#34;클래스-로더-3단계-과정&#34; ke-size=&#34;size26&#34;&gt;&lt;strong&gt;2. 클래스 로더 3단계 과정&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;클래스 로더는 다음 3단계 과정을 거쳐 클래스 파일을 로딩한다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
