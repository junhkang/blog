<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cleaner  - Finalizer  - 이팩티브자바 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/cleaner----finalizer----%EC%9D%B4%ED%8C%A9%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94/</link>
    <description>Recent content in Cleaner  - Finalizer  - 이팩티브자바 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/cleaner----finalizer----%EC%9D%B4%ED%8C%A9%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[이펙티브 자바] 8. finalizer 와 cleaner 사용을 피하라</title>
      <link>http://localhost:1313/posts/80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/80/</guid>
      <description>&lt;p&gt;finalizer와 cleaner는 자바의 2가지 객체 소멸자이다. finalizer는 Object.finalize() 메서드를 오버라이딩 함으로써 사용된다. 작동 여부 및 시점을 예측할 수 없고 상황에 따라 위험할 수 있어 일반적으로 불필요하며, 기능의 잘못된 동작, 낮은 성능, 이식성 문제의 원인이 되기도 한다. 기본적으로는 사용하면 안 되고, 자바 9에서는 finalizer를 deprecated API로 지정하고, java.lang.ref.Cleaner 클래스를 사용하여 구현된 cleaner를 대안으로 제시하였으나, cleaner 또한 finalizer보다는 덜 위험 하지만 여전히 예측불가하고 성능이 좋지 않아 일반적으로 불필요하다.&lt;/p&gt;
&lt;h2 id=&#34;2-사용-시-문제점&#34;&gt;2. 사용 시 문제점&lt;/h2&gt;
&lt;h3 id=&#34;2-1-예측불가능한-실행시점&#34;&gt;2-1. 예측불가능한 실행시점&lt;/h3&gt;
&lt;p&gt;finalizer, cleaner는 즉시 실행된다는 보장이 없다. 객체에 접근할 수 없게 된 후 언제 실행될지 알 수 없다는 뜻이며, 특정시점에 실행을 요하는 작업에는 사용이 불가능하다. 예를 들어 파일 닫기를 기능을 맡기면, 제때 안 닫히기 때문에 시스템이 열 수 있는 파일 개수에는 한계가 있고 큰 문제로 이어질 수 있다. finazlier, cleaner가 언제 수행될지는 전적으로 가비치 콜렉터 알고리즘에 달려있고, 가비지 콜렉터 구현마다 다르기에 finalizer, cleaner 수행시점에 의존되는 모든 프로그램의 동작 또한 예측할 수 없다. 이는 두 번째 문제인 &amp;ldquo;이식성 문제&amp;quot;로도 이어진다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
