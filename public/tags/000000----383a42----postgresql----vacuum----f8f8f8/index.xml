<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>000000  - 383a42  - PostgreSQL  - Vacuum  - F8f8f8 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/000000----383a42----postgresql----vacuum----f8f8f8/</link>
    <description>Recent content in 000000  - 383a42  - PostgreSQL  - Vacuum  - F8f8f8 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/000000----383a42----postgresql----vacuum----f8f8f8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PostgreSQL] Vacuum 개념 및 적절한 사용</title>
      <link>http://localhost:1313/posts/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/17/</guid>
      <description>&lt;p&gt;Vacuum은 postgresql에서 dead tuple이 차지하는 저장공간을 회수한다. 일반적으로 Postgresql에서 update, delete tuple 은 물리적으로 삭제되지 않으며 vacuum이 완료될 때까지 계속 존재한다.
(update, delete 시 tuple의 순환은 MVCC 개념에서 확인할 수 있다.)
&lt;a href=&#34;https://junhkang.tistory.com/15&#34;&gt;2023.10.06 - [Postgresql] - [PostgreSQL] MVCC (Multi-Version Concurrency Control)&lt;/a&gt;
[PostgreSQL] MVCC (Multi-Version Concurrency Control)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MVCC란? 동시성 제어를 위해 lock을 사용하는 대부분의 다른 데이터베이스 시스템과 달리 Postgres는 다중 버전 모델(multiversion model)을 사용하여 데이터 일관성을 유지한다. 각 트랜잭션이 데이터
junhkang.tistory.com
그렇기 때문에 특히 자주 업데이트되는 테이블의 경우 주기적인 Vacuum 수행이 필요하다. Vacuum은 특정 테이블에 한해서도 실행이 가능하고, 테이블을 지정하지 않는다면 전체 테이블 (권한을 보유한)에 대해서 실행된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-vacuum-명령어&#34;&gt;2. Vacuum 명령어&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;-- DB 전체 full vacuum vacuum full analyze; -- DB 전체 간단하게 실행 vacuum verbose analyze; -- 해당 테이블만 간단하게 실행 vacuum analyze [테이블 명]; -- 특정 테이블만 full vacuum vacuum full [테이블 명];&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
