<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>0070d1  - Index  - PostgreSQL  - E6f5ff  - 성능개선 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/0070d1----index----postgresql----e6f5ff----%EC%84%B1%EB%8A%A5%EA%B0%9C%EC%84%A0/</link>
    <description>Recent content in 0070d1  - Index  - PostgreSQL  - E6f5ff  - 성능개선 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/0070d1----index----postgresql----e6f5ff----%EC%84%B1%EB%8A%A5%EA%B0%9C%EC%84%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PostgreSQL] 인덱스(INDEX)와 오더바이(ORDER BY), ORDER BY 성능개선, 효율적인 인덱스 적용</title>
      <link>http://localhost:1313/posts/69/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/69/</guid>
      <description>&lt;p&gt;인덱스는 쿼리의 결과로 특정 row를 찾는 것뿐만 아니라, 특정 순서로 데이터를 정렬하는데도 효율적일 수 있다. ORDER BY와 인덱스를 효율적으로 사용하면 별도의 정렬 과정 없이 ORDER BY를 수행할 수 있다. PostgreSQL에서 현재 지원하는 인덱스 타입 중에서는 B-tree 인덱스만이 정렬 결과로 인덱스를 생성할 수 있다. 다른 인덱스 유형은 특정되지 않은 순서로, 실행 때마다 다른 순서로 열을 반환한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상세한 B-tree 인덱스의 개념은 다음 글을 참고 - &lt;a href=&#34;https://junhkang.tistory.com/6&#34;&gt;2023.09.12 - [Postgresql] - [PostgreSQL] B-tree 인덱스의 원리 및 특징&lt;/a&gt;
[PostgreSQL] B-tree 인덱스의 원리 및 특징
PostgreSQL에는 6가지의 인덱스 종류가 있다. 각각의 인덱스는 다양한 데이터 탐색을 위해 다른 알고리즘을 사용한다. 그중 가장 일반적으로 사용되고, 가장 먼저 도입된 알고리즘인 B-tree 인덱스에
junhkang.tistory.com
플래너는 ORDER BY를 수행할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;해당 조건에 맞는 사용 가능한 인덱스를 스캔&lt;/li&gt;
&lt;li&gt;테이블을 물리적으로 스캔하여 명시적으로 정렬을 수행한 후 ORDER BY 사양에 충족하는 row를 스캔 (실제 테이블 스캔)
중 효율적인 스캔을 실행한다. 테이블의 많은 부분을 조회하는 쿼리의 경우, 명시적 조회가 인덱스를 조회하는 것보다 빠르다. (대량 데이터를 조회할 시에는 데이터를 순차적 접근 패턴이 디스크 I/O를 덜 필요로 하기 때문이다.) 이는 기본적인 인덱스의 특징과 동일하고, 적은 수의 row를 반환하는 경우에 더 유용하다. (선택도가 낮을수록 효율적, 10~15%)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;효율적인 인덱스 설계 및 작동 방식은 다음 글을 참고 - &lt;a href=&#34;https://junhkang.tistory.com/5&#34;&gt;2023.09.12 - [Postgresql] - [PostgreSQL] 인덱스(INDEX) 개념 및 생성, 삭제, 분석, 설계 방법&lt;/a&gt;
[PostgreSQL] 인덱스(INDEX)개념 및 생성, 삭제, 분석, 설계 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;인덱스 컨트롤 1-1. 인덱스 조회 SELECT * FROM pg_indexes WHERE tablename = &amp;lsquo;{테이블명}&amp;rsquo;; &amp;ndash; 테이블명에 &amp;rsquo;&amp;rsquo; 필요 1-2. 인덱스 생성 &amp;ndash; 단일 인덱스 CREATE INDEX {인덱스명} ON {테이블명} USING btree({컬럼명}); &amp;ndash; 결
junhkang.tistory.com
특히 LIMIT n과 ORDER BY를 결합하여 결과 값을 제한하는 경우가 인덱스 테이블의 사용이 효율적이다. 이 경우 명시적 조회는 첫 n개의 rows를 반환하기 위해 전체 데이터를 조회해야 하지만, 해당 ORDER BY와 일치하는 인덱스가 있다면 첫 n개의 row는 나머지 row를 조회할 것 없이 바로 출력된다.
기본적으로 B-tree인덱스는 오름차순(ASC)에 NULLS LAST로 정렬된 채로 데이터를 저장한다. (같은 순서의 경우 테이블의 TID를 기준으로 정렬) 그렇기 때문에, 칼럼 x의 인덱스를 일반적인 정방향 스캔을 할 경우, x칼럼의 오름차순(ORDER BY x ASC NULLS LAST)의 정렬과 동일한 결과가 출력된다.
정렬 인덱스는 정렬 설정된 방향의 역방향으로도 스캔될 수 있기 때문에 ORDER BY x DESC NULLS FIRST에 대한 정렬도 인덱스 스캔할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-order-by-인덱스-생성&#34;&gt;2. ORDER BY 인덱스 생성&lt;/h2&gt;
&lt;p&gt;B-tree 인덱스를 생성할 때 ASC, DESC, NULLS FIRST, NULLS LAST 옵션을 부여하여 정렬을 조정할 수 있다.
&lt;code&gt;CREATE INDEX test2_info_nulls_low ON test2 (info NULLS FIRST); CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);&lt;/code&gt;
칼럼 x에 대해 ASC NULLS FIRST로 저장된 인덱스는 스캔 방향에 따라 x ASC NULLS FIRST 혹은 x DESC NULLS LAST의 쿼리에 효과를 볼 수 있다는 것인데, 여기까지 보면 정방향, 역방향 (역스캔 가능한) 옵션이 ORDER BY 모든 변형을 포함할 수 있다. ORDER BY의 모든 변형 4가지를 살펴보면 다음과 같은데&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
