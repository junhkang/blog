<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>BACKUP-PITR-RECOVERY  - PostgreSQL  - Wal  - 아카이브 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/backup-pitr-recovery----postgresql----wal----%EC%95%84%EC%B9%B4%EC%9D%B4%EB%B8%8C/</link>
    <description>Recent content in BACKUP-PITR-RECOVERY  - PostgreSQL  - Wal  - 아카이브 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/backup-pitr-recovery----postgresql----wal----%EC%95%84%EC%B9%B4%EC%9D%B4%EB%B8%8C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PostgreSQL] WAL (Write-Ahead Logging) / 아카이브 모드 백업(Archive mode backup)의 개념 및 장단점</title>
      <link>http://localhost:1313/posts/66/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/66/</guid>
      <description>&lt;p&gt;아카이브 모드 백업을 이해하기 위해 WAL에 대한 개념을 먼저 살펴보자. WAL은 PostgreSQL에서 데이터의 무결성을 보장하는 표준 방법으로, 기본 콘셉트는 모든 데이터의 변경을 로깅 완료 후에 실행하는 것이다. WAL 기록을 영구적인 저장소에 먼저 기록한 후에 데이터의 변경 내용을 실행하는 것으로, 이 과정을 거치면 충돌 혹은 데이터에 문제가 있을 때 WAL 로깅 내용을 바탕으로 특정 시점으로 복구가 가능하여 데이터 무결성을 보장할 수 있다.
충돌이 발생할 때마다 Log를 통해 데이터베이스를 복구할 수 있기 때문에, 모든 트랜잭션 커밋 시마다 디스크의 데이터를 flush 할 필요 없다.  또한 WAL을 사용하면 디스크 쓰기 횟수가 현저히 줄어든다. 트랜잭션에 의해 변경된 모든 데이터 파일을 write 하는 것이 아니라 WAL 파일만 디스크에 flush 하면 트랜잭션이 커밋되기 때문이다. WAL은 순차적으로 작성되기 때문에 WAL 동기화 비용은 데이터 페이지를 flush 하는 것보다 코스트가 훨씬 적다. (특히 데이터베이스가 여러 군데의 작은 트랜잭션을 처리할 때 효율적이다.)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
