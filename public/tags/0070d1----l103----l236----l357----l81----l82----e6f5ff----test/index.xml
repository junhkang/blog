<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>0070d1  - L103  - L236  - L357  - L81  - L82  - E6f5ff  - Test on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/0070d1----l103----l236----l357----l81----l82----e6f5ff----test/</link>
    <description>Recent content in 0070d1  - L103  - L236  - L357  - L81  - L82  - E6f5ff  - Test on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/0070d1----l103----l236----l357----l81----l82----e6f5ff----test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Spring] 테스트 2 - 테스트 코드를 어떻게 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/97/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;첫 번째 테스트의 중요성: 구현하기 가장 쉬운 테스트부터 시작하는 것이 좋습니다. 예외적인 상황이나 가장 빠르게 개발할 수 있는 테스트 케이스를 먼저 작성하고, 점차 확장해 나갑니다.&lt;/li&gt;
&lt;li&gt;점진적 확장: 쉬운 테스트부터 시작해 점차 복잡한 테스트로 나아가면서 시스템의 안정성을 검증합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-tdd-test-driven-development-방법론&#34;&gt;2.2 TDD (Test-Driven Development) 방법론&lt;/h2&gt;
&lt;p&gt;TDD는 테스트 주도 개발 방식으로, 테스트 코드를 먼저 작성하고 이를 기반으로 프로덕션 코드를 작성하는 방식입니다. TDD는 다음과 같은 세 단계를 따릅니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;레드 단계: 실패하는 테스트를 작성합니다. 이때, 아직 프로덕션 코드는 작성되지 않았기 때문에 테스트는 실패합니다.&lt;/li&gt;
&lt;li&gt;그린 단계: 최소한의 코드로 테스트를 통과시킵니다. 테스트를 성공시키기 위한 코드만 작성하여 빠르게 테스트를 통과합니다.&lt;/li&gt;
&lt;li&gt;리팩터 단계: 중복을 제거하고 코드 구조를 개선합니다. 테스트가 통과한 후 코드의 가독성이나 유지보수성을 높이기 위해 리팩터링을 진행합니다.
이 과정을 반복하면서 점진적으로 시스템을 구축하고 테스트의 커버리지를 높여갑니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-다양한-테스트-종류와-계층-구조-이해&#34;&gt;2.3 다양한 테스트 종류와 계층 구조 이해&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;단위 테스트: 개별 모듈이나 메서드를 테스트하는 방식으로, 가장 기본적인 테스트 방법입니다. 빠르고, 독립적으로 실행될 수 있습니다.&lt;/li&gt;
&lt;li&gt;통합 테스트: 여러 모듈이 함께 작동하는지를 테스트하는 방식입니다. 단위 테스트보다 더 복잡한 시나리오를 검증할 수 있습니다.&lt;/li&gt;
&lt;li&gt;시스템 테스트: 전체 시스템이 의도한 대로 작동하는지를 검증하는 테스트로, 사용자의 관점에서 테스트를 진행합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24-junit5-활용&#34;&gt;2.4 JUnit5 활용&lt;/h2&gt;
&lt;p&gt;JUnit5는 자바 테스트를 위한 표준 프레임워크입니다. 다음과 같은 주요 구성 요소와 기능을 갖추고 있습니다:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
