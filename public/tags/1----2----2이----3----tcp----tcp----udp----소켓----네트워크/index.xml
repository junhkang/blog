<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>1  - 2  - 2이  - 3  - TCP  - Tcp  - Udp  - 소켓  - 네트워크 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/1----2----2%EC%9D%B4----3----tcp----tcp----udp----%EC%86%8C%EC%BC%93----%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/</link>
    <description>Recent content in 1  - 2  - 2이  - 3  - TCP  - Tcp  - Udp  - 소켓  - 네트워크 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/1----2----2%EC%9D%B4----3----tcp----tcp----udp----%EC%86%8C%EC%BC%93----%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[네트워크] 소켓(SOCEKT) 통신, 3-way handshake의 개념</title>
      <link>http://localhost:1313/posts/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/30/</guid>
      <description>&lt;p&gt;소켓은 떨어져 있는 두 호스트를 연결해 주는 도구로써 인터페이스 역할을 한다. TCP/IP 기반 네트워크 통신에서 데이터 송수신의 앤드포인트이며 앤드포인트는 IP, Port조합으로 이루어진 목적지를 나타낸다. 서버-클라이언트 간 데이터를 주고받는 양방향 연결 지향성 통신으로 지속적으로 연결을 유지하면서 실시간 데이터를 주고받는 데 사용된다.
소켓은 서버 소켓과 클라이언트 소켓으로 이루어지며, 다음은 소켓 간 통신이 이루어지는 과정이다.
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/30/img.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-1-서버-소켓&#34;&gt;1-1. 서버 소켓&lt;/h3&gt;
&lt;p&gt;클라이언트에서 연결요청이 오기를 기다렸다가 연결 요청이 들어오면 클라이언트와 연결을 맺고 새로운 소켓을 만든다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socket() - CLOSED 상태의 소켓 인스턴스 생성&lt;/li&gt;
&lt;li&gt;bind() - ip, port 할당 (중복, 권한 문제로 주소&amp;amp; 포트 할당에 실패 할 수 있다.)&lt;/li&gt;
&lt;li&gt;listen() - 서버 소켓 상태는 LISTEN 상태로 변경, 클라이언트 요청을 queue 대기열을 만들어 몇 개의 클라이언트를 대기시킬지 결정&lt;/li&gt;
&lt;li&gt;accept() - 각 클라이언트와 통신에 필요한 새로운 연결된 소켓을 획득, 클라이언트와 연결&lt;/li&gt;
&lt;li&gt;send() / recv() - 데이터 송수신&lt;/li&gt;
&lt;li&gt;close() - 소켓 닫기
listen상태에서 3-way handshaking을 거쳐 클라이언트, 소켓 연결이 ESTABLISH 상태가 되며, 그 후 accept()~close()를 반복하며 데이터를 송수신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-클라이언트-소켓&#34;&gt;1-2. 클라이언트 소켓&lt;/h3&gt;
&lt;p&gt;서버로 연결요청 및 데이터 전송을한다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
