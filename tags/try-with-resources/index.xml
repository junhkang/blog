<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Try-With-Resources on Jun Kang&#39;s Blog</title>
    <link>http://localhost:50666/tags/try-with-resources/</link>
    <description>Recent content in Try-With-Resources on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Sat, 06 Apr 2024 19:32:18 +0000</lastBuildDate>
    <atom:link href="http://localhost:50666/tags/try-with-resources/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[이펙티브 자바] 9. try-finally 보다는 try-with-resources를 사용하라</title>
      <link>http://localhost:50666/posts/81/</link>
      <pubDate>Sat, 06 Apr 2024 19:32:18 +0000</pubDate>
      <guid>http://localhost:50666/posts/81/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;개념&#34; ke-size=&#34;size26&#34;&gt;1. 개념&lt;/h2&gt;
&lt;p&gt;자바 라이브러리에는 close 메서드를 직접 호출해서 닫아줘야 하는 자원이 많다. 대표적으로 InputStream, ouputStream java.sql.connection 등이 있으며 해당 자원들은 클라이언트에서 놓치기 쉬워 예측할 수 없는 성능 문제로 이어지곤 한다. 이중 상당 수가 finalizer를 안정망으로 사용하여 문제에 대비하고 있긴 하지만, 완전히 안전하다고 할 수 없다. (해당 내용은 다음 포스트에서 확인 가능)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://junhkang.tistory.com/80&#34;&gt;[이펙티브 자바] - [이펙티브 자바] 8. finalizer와 cleaner 사용을 피하라&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;흔히 사용하는 try-finally를 사용한 예외처리를 확인해보자&lt;/p&gt;
&lt;h2 id=&#34;try-finally&#34; ke-size=&#34;size26&#34;&gt;2. try-finally&lt;/h2&gt;
&lt;h3 id=&#34;자원을-1개-사용하는-try-finally-메서드&#34; ke-size=&#34;size23&#34;&gt;2-1. 자원을 1개 사용하는 try-finally 메서드&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;static String firstLineOfFile(String path) throws IOException    {
       BufferdReader br = new BufferedReader(new FileReader(Path));
       try {
           return br.readLine();
       }    finally {
           br.close();
       }
   }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
