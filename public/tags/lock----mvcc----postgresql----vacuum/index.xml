<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lock  - MVCC  - PostgreSQL  - Vacuum on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/lock----mvcc----postgresql----vacuum/</link>
    <description>Recent content in Lock  - MVCC  - PostgreSQL  - Vacuum on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 06 Oct 2023 18:53:47 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/lock----mvcc----postgresql----vacuum/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>\\[PostgreSQL\\] MVCC (Multi-Version Concurrency Control)
</title>
      <link>http://localhost:1313/posts/15/</link>
      <pubDate>Fri, 06 Oct 2023 18:53:47 +0000</pubDate>
      <guid>http://localhost:1313/posts/15/</guid>
      <description>&lt;h2 id=&#34;postgresql-mvcc-multi-version-concurrency-control&#34;&gt;[PostgreSQL] MVCC (Multi-Version Concurrency Control)&lt;/h2&gt;
&lt;p&gt;Postgresql&lt;/p&gt;
&lt;figure class=&#34;imageblock alignCenter&#34;&gt;
&lt;span data-lightbox=&#34;lightbox&#34;&gt; &lt;img src=&#34;http://localhost:1313/images/posts/15/img.png&#34; /&gt; &lt;/span&gt;
&lt;/figure&gt;
## 1.  MVCC란?
&lt;span style=&#34;background-color: #fdfdfd; color: #000000; text-align: start;&#34;&gt;동시성 제어를 위해 lock을 사용하는 대부분의 다른 데이터베이스 시스템과 달리 Postgres는 다중 버전 모델(multiversion model)을 사용하여 데이터 일관성을 유지한다. 각 트랜잭션이 데이터베이스를 쿼리 하는 동안 데이터의 현재 상태에 관계없이 얼마 전의 데이터 스냅샷을 볼 수 있음을 의미한다. &lt;/span&gt;데이터를 쿼리 하기 위해 트랜잭션을 만들었다면 해당 Transaction은 데이터의 스냅샷을 보고 있는 것이다.
동일한 행에 서로 다른 트랜잭션이 동시에 업데이트를 시도할 때, 일관성 없는 데이터가 조회되지 않도록 트랜잭션을 보호하여 각 데이터베이스 세션에 대한 트랜잭션 격리를 제공한다. &lt;span style=&#34;background-color: #fdfdfd; color: #000000; text-align: start;&#34;&gt;Multiversion과 Lock model의 주요 차이점은 MVCC에서 데이터 read를 위해 획득한 lock과 데이터 쓰기를 위해 획득한 lock이 충돌하지 않는다는 것이다. (따라서 read와 write는 서로 block 하지 않는다.) &lt;/span&gt;&lt;span style=&#34;background-color: #ffffff; color: #212529; text-align: start;&#34;&gt;이러한 방식을 통해서 Reading 하는 작업에 대해서 Lock을 걸지 않기에 높은 성능을 얻을 수 있게 된다.&lt;/span&gt;&lt;span style=&#34;background-color: #ffffff; color: #212529; text-align: start;&#34;&gt;&lt;/span&gt;
### &lt;span style=&#34;background-color: #ffffff; color: #212529; text-align: start;&#34;&gt;1-1. Postgresql Lock에 대한 상세 설명&lt;/span&gt;
&lt;a href=&#34;https://junhkang.tistory.com/4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023.09.11 - [Postgresql] - Postgresql Lock이란? (조회 및 kill, Dead lock)&lt;/a&gt;
&lt;figure id=&#34;og_1696585111466&#34; contenteditable=&#34;false&#34; data-ke-type=&#34;opengraph&#34; data-ke-align=&#34;alignCenter&#34; data-og-type=&#34;article&#34; data-og-title=&#34;Postgresql Lock이란? (조회 및 kill, Dead lock)&#34; data-og-description=&#34;1. Lock 확인방법 SELECT PSAT.RELNAME, PL.LOCKTYPE, PL.PID, PL.MODE, PL.GRANTED FROM PG_LOCKS PL, PG_STAT_ALL_TABLES PSAT WHERE PL.RELATION = PSAT.RELID 2. Lock Kill 방법 SELECT PG_CANCEL_BACKEND([PID]) SELECT PG_TERMINATE_BACKEND([PID]) Lock 리스&#34; data-og-host=&#34;junhkang.tistory.com&#34; data-og-source-url=&#34;https://junhkang.tistory.com/4&#34; data-og-url=&#34;https://junhkang.tistory.com/4&#34; data-og-image=&#34;https://scrap.kakaocdn.net/dn/Vzh9w/hyT9IiAvL4/ZvkxrH6v3mKYZhT1kWhe4K/img.png?width=800&amp;amp;height=222&amp;amp;face=0_0_800_222,https://scrap.kakaocdn.net/dn/uHCIt/hyT9BKwZHb/K2pXi6qfloeTqaPuKrBvzK/img.png?width=800&amp;amp;height=222&amp;amp;face=0_0_800_222,https://scrap.kakaocdn.net/dn/iU8Y3/hyT5S8dM8b/qEpb579XwdyaS24c1lDi31/img.png?width=1195&amp;amp;height=333&amp;amp;face=0_0_1195_333&#34;&gt;
&lt;a href=&#34;https://junhkang.tistory.com/4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; data-source-url=&#34;https://junhkang.tistory.com/4&#34;&gt;&lt;/a&gt;
&lt;p&gt;Postgresql Lock이란? (조회 및 kill, Dead lock)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
