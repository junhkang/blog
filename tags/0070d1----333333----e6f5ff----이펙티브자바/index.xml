<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>0070d1  - 333333  - E6f5ff  - 이펙티브자바 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/0070d1----333333----e6f5ff----%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94/</link>
    <description>Recent content in 0070d1  - 333333  - E6f5ff  - 이펙티브자바 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/0070d1----333333----e6f5ff----%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[이펙티브 자바] 5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라</title>
      <link>http://localhost:1313/posts/76/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/76/</guid>
      <description>&lt;p&gt;한 클래스 내에서 여러 개의 자원에 의존하여 사용되는 경우에 의존 객체 주입을 통해 유연성과 테스트 용이성을 개선하는 내용이다. 스프링의 의존성 주입 개념을 생각해 본다면 이미 당연하게 사용하고 있는 경우가 많을 것이지만, 의존 객체 주입의 장점을 다시 한번 생각해 볼 수 있는 내용이다.
&lt;a href=&#34;https://junhkang.tistory.com/42&#34;&gt;2023.11.06 - [Spring] - [Spring] IoC(제어의 역전) &amp;amp; DI(의존성 주입)의 개념&lt;/a&gt;
[Spring] IoC(제어의 역전) &amp;amp; DI(의존성 주입)의 개념&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IoC (Inversion of Control) 제어의 역전 IoC란 메인 프로그램에서 컨테이너나 프레임워크로 객체와 객체의 의존성에 대한 제어를 넘기는 것을 말한다. 프레임워크 없이 개발할 때는 각 객체에 대한
junhkang.tistory.com
이펙티브 자바 책에서는 &amp;ldquo;맞춤법 검사기 (SpellChecker)&amp;rdquo; 클레스에서 &amp;ldquo;사전 (Dictionary)&amp;rdquo; 자원을 사용하는 예제를 들고 있다. 맞춤법 검사기 (SpellChecker)는 사전(dictionary) 자원에 의존하는 상황을 정적 유틸리티, 싱글턴, 의존객체 주입의 차이를 비교하고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-예제&#34;&gt;2. 예제&lt;/h2&gt;
&lt;h3 id=&#34;2-1-정적-유틸리티&#34;&gt;2-1. 정적 유틸리티&lt;/h3&gt;
&lt;p&gt;정적 유틸리티를 잘못 사용한 예 - 유연하지 않고 테스트하기 어렵다.
&lt;code&gt;public class SpellCheckerStatic { private static final Lexicon dictionary = new Lexicon(); private SpellCheckerStatic() { } // 객체 생성 방지 public static boolean isValid(String word) { return dictionary.isValid(word); } public static List suggestions(String typo) { return dictionary.suggestions(typo); } }&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
