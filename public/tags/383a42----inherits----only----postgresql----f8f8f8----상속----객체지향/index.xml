<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>383a42  - Inherits  - Only  - PostgreSQL  - F8f8f8  - 상속  - 객체지향 on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/383a42----inherits----only----postgresql----f8f8f8----%EC%83%81%EC%86%8D----%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/</link>
    <description>Recent content in 383a42  - Inherits  - Only  - PostgreSQL  - F8f8f8  - 상속  - 객체지향 on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/383a42----inherits----only----postgresql----f8f8f8----%EC%83%81%EC%86%8D----%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PostgreSQL] 데이터베이스 상속(Inheritance)의 개념과 사용법 및 성능비교 (Inherits, Only)</title>
      <link>http://localhost:1313/posts/39/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/39/</guid>
      <description>&lt;p&gt;상속은 객체지향 데이터베이스의 개념 중 하나이다. PostgreSQL은 테이블 생성 시 하나 이상의 다른 테이블로부터의 상속 기능을 제공하며, 이를 잘 활용하면 데이터베이스 설계에 새로운 가능성들을 열어준다. 데이터뿐만 아니라 부모 테이블의 컬럼 속성 및 인덱스 등의 특징들도 자식 테이블로 상속되기에 상황에 따라 효율적인 설계가 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;2-데이터베이스-상속inherits-방법&#34;&gt;2. 데이터베이스 상속(Inherits) 방법&lt;/h2&gt;
&lt;p&gt;다음 예제는 PostgreSQL 공식 문서의 예제이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Capitals - 이름, 인구, 고도, 요약어를 포함한 수도의 정보가 포함된 테이블Cities - 이름, 인구, 고도를 포함한 도시 정보가 포함된 테이블
수도는 도시에 포함되기에, 전체 도시 리스트를 보여줄 때, 수도 리스트를 동시에 보여주는 상황이 있을 것이다. 이 경우 상속을 사용하지 않고는 보통 이런 식으로 스키마를 작성한다.
&lt;code&gt;CREATE TABLE capitals ( name       text, population real, elevation  int,    -- (in ft) state      char(2) ); CREATE TABLE non_capitals ( name       text, population real, elevation  int     -- (in ft) ); CREATE VIEW cities AS SELECT name, population, elevation FROM capitals UNION SELECT name, population, elevation FROM non_capitals;&lt;/code&gt;
수도(capitals)와 도시(cities) 리스트를 중복 없이 보여주는 기능은 잘 작동하겠지만, 양쪽에 중복된 데이터가 있을 경우, 데이터 변경 시 각각 테이블의 행을 업데이트해야 하기에 효율적이지 못하다. 이 같은 경우 다음과 같이 상속을 사용하면 더 효율적이다.
&lt;code&gt;CREATE TABLE cities ( name       text, population real, elevation  int     -- (in ft) ); CREATE TABLE capitals ( state      char(2) UNIQUE NOT NULL ) INHERITS (cities);&lt;/code&gt;
수도(capitals) 테이블의 모든 row는 부모테이블인 도시(cities)의 모든 컬럼들 (name, population, elevation)을 상속받는다.
예를 들어 다음 쿼리는 500피트 이상의 고도에 존재하는 수도를 포함한 모든 도시의 이름을 찾을 때 Cities 테이블로만 조회가 가능하다.
&lt;code&gt;SELECT name, elevation FROM cities WHERE elevation &amp;gt; 500;&lt;/code&gt;
결과는
&lt;code&gt;  name    | elevation -----------+----------- Las Vegas |      2174 Mariposa  |      1953 Madison   |       845 (3 rows)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
