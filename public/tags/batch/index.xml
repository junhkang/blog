<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Batch on Jun Kang&#39;s Blog</title>
    <link>https://junhkang.com/tags/batch/</link>
    <description>Recent content in Batch on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Thu, 19 Oct 2023 18:20:45 +0000</lastBuildDate>
    <atom:link href="https://junhkang.com/tags/batch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Spring] 스프링 배치 ItemReader의 개념, (MybatisCursorItemReader, MybatisPagingItemReader 구현)</title>
      <link>https://junhkang.com/posts/32/</link>
      <pubDate>Thu, 19 Oct 2023 18:20:45 +0000</pubDate>
      <guid>https://junhkang.com/posts/32/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://junhkang.com/images/posts/32/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;itemreader란&#34; ke-size=&#34;size26&#34;&gt;1. ItemReader란?&lt;/h2&gt;
&lt;p&gt;스프링 배치의 ItemReader는 다음과 같은 과정을 거쳐 데이터를 처리한다.
 &lt;/p&gt;
&lt;img src=&#34;0&#34; /&gt;
&lt;p&gt;출처:https://jojoldu.tistory.com/336&lt;/p&gt;
&lt;p&gt;대부분의 데이터 형태는 이미 ItemReader로 제공하고 있기에 ItemReader, ItemStream 인터페이스 자체를 구현할 필요는 없다.&lt;/p&gt;
&lt;p&gt;ItemReader는 Chunk 기반 트랜잭션을 다루며 Cursor, Paging 가 대표적인 2가지 방식이다.&lt;/p&gt;
&lt;h2 id=&#34;cursor-paging-형식&#34; ke-size=&#34;size26&#34;&gt;2. Cursor, Paging 형식&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://junhkang.com/images/posts/32/img_2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;출처:https://ojt90902.tistory.com/780&lt;/p&gt;
&lt;h3 id=&#34;cursor기반-itemreader&#34; ke-size=&#34;size23&#34;&gt;2-1. Cursor기반 ItemReader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JDBC ResultSet의 기본 기능이다.&lt;/li&gt;
&lt;li&gt;ResultSet이 Open 될 때마다 데이터베이스의 데이터가 반환된다.&lt;/li&gt;
&lt;li&gt;데이터베이스와 연결 맺은 후 데이터를 Streaming 방식으로 I/O이다.&lt;/li&gt;
&lt;li&gt;현재 행에서Cursor를 유지하며 다음 데이터를 호출하면 Cursor를 한 칸씩 옮기면서 데이터를 가져온다.&lt;/li&gt;
&lt;li&gt;하나의 Connection으로 배치가 끝날때까지 사용되기에 Batch가 끝나기 전에 데이터베이스와 애플리케이션의 연결이 먼저 끊어질 수 있어 데이터베이스와 SocketTimeout을 충분한 값으로 설정하여야 한다.&lt;/li&gt;
&lt;li&gt;모든 결과를 메모리에 할당 하기 때문에 메모리 사용량이 많아진다.&lt;/li&gt;
&lt;li&gt;Chunk 사이즈 만큼의 트랜잭션 단위로 데이터를 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cursor 기반 ItemReader 구현체&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
