<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Function on Jun Kang&#39;s Blog</title>
    <link>https://junhkang.com/tags/function/</link>
    <description>Recent content in Function on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 15 Nov 2023 17:12:23 +0000</lastBuildDate>
    <atom:link href="https://junhkang.com/tags/function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PostgreSQL] 함수(Function)의 정의 및 상세 사용법 (다양한 예제)</title>
      <link>https://junhkang.com/posts/46/</link>
      <pubDate>Wed, 15 Nov 2023 17:12:23 +0000</pubDate>
      <guid>https://junhkang.com/posts/46/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;![](![](/images/posts/46/img.png))&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;postgresql-function이란&#34; ke-size=&#34;size26&#34;&gt;1. PostgreSQL Function이란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL 함수는 임의의 SQL문들을 실행하고 마지막 쿼리의 결과를 반환한다. 단순한 형태의 함수는 마지막 쿼리의 첫 번째 row가 리턴된다. (order by 를 사용하지 않는 경우 다중 row의 첫 번째 행은 별도 정의되지 않기에 결과 row가 매번 다를 수 있다.)&lt;/li&gt;
&lt;li&gt;마지막 쿼리가 row를 하나도 반환하지 않을 경우 null이 리턴된다.&lt;/li&gt;
&lt;li&gt;SQL 함수는 함수의 리턴 유형을 특정 타입의 집합 (SET)으로 선언하거나, 테이블로 선언하여 반환할 수 있다. 이 경우에는 마지막 쿼리의 모든 ROW가 리턴된다.&lt;/li&gt;
&lt;li&gt;SQL함수의 body는 세미콜론(;)으로 구분된 SQL구문의 집합이어야만 한다.&lt;/li&gt;
&lt;li&gt;마지막 구문 뒤의 세미콜론(;)은 생략하여도된다.&lt;/li&gt;
&lt;li&gt;함수가 void를 리턴하는 것으로 선언되지 않았다면, 마지막 구문은 반환절이 존재하는 select, insert, update, delete 여야만 한다.&lt;/li&gt;
&lt;li&gt;모든 종류의 SQL 언어의 명령 모음은 패키징 되어 함수로 정의될 수 있다.&lt;/li&gt;
&lt;li&gt;select쿼리 외에도 insert, update, delete, merge 등의 데이터 수정쿼리 및 기타 SQL을 포함할 수 있지만, 트랜잭션 제어 명령( ex. commit, savepoint) 및 vacutaion 등의 일부 유틸리티 명령은 사용할 수 없다.&lt;/li&gt;
&lt;li&gt;SQL이 작동은 하지만 특정 값을 리턴하지 않는 SQL 함수를 정의하고 싶다면, void를 리턴하는 것으로 정의할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;function-간단-예시&#34; ke-size=&#34;size23&#34;&gt;▶ 1-1. Function 간단 예시&lt;/h3&gt;
&lt;p&gt;다음은 emp 테이블에서 음수의 salary를 삭제하는 함수이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[PostgreSQL] Trigger, Procedure, Function (history 관리하기)</title>
      <link>https://junhkang.com/posts/3/</link>
      <pubDate>Fri, 08 Sep 2023 13:37:27 +0000</pubDate>
      <guid>https://junhkang.com/posts/3/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://junhkang.com/images/posts/3/img.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;가장-보편적으로-쓰이는-간단한-history-저장-트리거-생성-예제&#34; ke-size=&#34;size26&#34;&gt;* 가장[ ]{style=&amp;ldquo;color: #333333; text-align: start;&amp;quot;}보편적으로[ ]{style=&amp;ldquo;color: #333333; text-align: start;&amp;quot;}쓰이는 간단한 history 저장 트리거[ ]{style=&amp;ldquo;color: #333333; text-align: start;&amp;quot;}생성[ ]{style=&amp;ldquo;color: #333333; text-align: start;&amp;quot;}예제&lt;/h2&gt;
&lt;p&gt;특정 테이블에 insert, update가 수행될 경우 무조건 내역에 &amp;ldquo;insert&amp;quot;를 하는 간단한 트리거 생성 예제이다.&lt;/p&gt;
&lt;h4 id=&#34;함수를-실행할-트리거-생성&#34; ke-size=&#34;size20&#34;&gt;1-1. 함수를 실행할 트리거 생성&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create trigger trigger_save_history
after insert or update on A
for each row
execute procedure trigger_insert();
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;실제-insert문이-실행되는-함수&#34; ke-size=&#34;size20&#34;&gt;1-2. 실제 insert문이 실행되는 함수 &lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE OR REPLACE FUNCTION trigger_insert()
returns trigger
AS $$
DECLARE
BEGIN
    insert into B
        (id, values, date)
    values
        (new.id, new.values, current_timestamp());
    return NULL;
END; $$
LANGUAGE &amp;#39;plpgsql&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
