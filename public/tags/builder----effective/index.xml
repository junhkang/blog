<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Builder  - Effective on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/builder----effective/</link>
    <description>Recent content in Builder  - Effective on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <atom:link href="http://localhost:1313/tags/builder----effective/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[이펙티브 자바] 2. 생성자에 매개변수가 많다면 빌더를 고려하라</title>
      <link>http://localhost:1313/posts/54/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/54/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;필수 매개변수만 받는 생성자필수 매개변수와 선택 매개변수 1개를 받는 생성자,필수 매개변수와 선택 매개변수 2개를 받는 생성자,필수 매개변수와 선택 매개변수 3개를 받는 생성자,&amp;hellip;
형태로 매개변수를 전부 받는 생성자까지 늘려가는 방식이다. 인스턴스 생성 시에는 매개변수를 모두 포함한 생성자 중 가장 짧은 것을 골라 호출하면 된다. 점층적 생성자 패턴도 충분히 유용하게 사용이 가능하지만, 매개변수가 많아지면 클라이언트 코드를 읽거나 작성하기 힘들고, 설정하길 원하지 않는 값도 인자로 넣어줘야 하는 경우가 있다.
또한 매개변수의 수가 늘어날수록 의미 헷갈리고, 갯수, 위치를 매번 세어야 하기에 버그로 이어지기 쉽다. 인자의 순서를 바꿔도 컴파일 단계에서는 알 수 없고 런타임단계에서 문제를 일으킬 것이다. 다음은 책의 예제를 그대로 구현해 본 점층적 생성자 패턴이다.
&lt;code&gt;/* 2-1 점층적 생성자 패턴 - 확장하기 어렵다. */ public class NutritionFactsTcp { private final int servingSize; // (mL) required private final int servings; // (per container) required private final int calories; // (per serving) optional private final int fat; // (g/serving) optional private final int sodium; // (mg/serving) optional private final int carbohydrate; // (g/serving) optional public NutritionFactsTcp(int servingSize, int servings) { this(servingSize, servings, 0); } public NutritionFactsTcp(int servingSize, int servings,int calories)  { this(servingSize, servings, calories, 0); } public NutritionFactsTcp(int servingSize, int servings,int calories, int fat)  { this(servingSize, servings, calories, fat, 0); } public NutritionFactsTcp(int servingSize, int servings,int calories, int fat, int sodium)  { this(servingSize, servings, calories, fat, sodium, 0); } public NutritionFactsTcp(int servingSize, int servings,int calories, int fat, int sodium, int carbohydrate)  { this.servingSize = servingSize; this.servings = servings; this.calories = calories; this.fat = fat; this.sodium = sodium; this.carbohydrate = carbohydrate; } }&lt;/code&gt;
매개변수가 추가될 수록 유연하게 대응하는 것이 힘들고, fat / sodium 등의 매개변수 위치를 실수로 잘못 넣더라도 컴파일 단계에서 확인이 불가능하다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
