<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Di on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/di/</link>
    <description>Recent content in Di on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 06 Nov 2023 14:20:06 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/di/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Spring] IoC(제어의 역전) &amp; DI(의존성 주입)의 개념</title>
      <link>http://localhost:1313/posts/42/</link>
      <pubDate>Mon, 06 Nov 2023 14:20:06 +0000</pubDate>
      <guid>http://localhost:1313/posts/42/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;ioc-inversion-of-control-제어의-역전&#34; ke-size=&#34;size26&#34;&gt;1. IoC (Inversion of Control) 제어의 역전&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/42/img.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;IoC란 메인 프로그램에서 컨테이너나 프레임워크로 객체와 객체의 의존성에 대한 제어를 넘기는 것을 말한다. 프레임워크 없이 개발할 때는 각 객체에 대한 라이프사이클 (생성, 설정, 초기화, 호출 등)을 개발자가 직접 관리한다. 하지만 프레임워크를 사용하면 객체의 생명주기를 프레임워크에 위임하여, 프레임워크가 개발자의 코드를 호출하고 흐름을 제어하게 할 수 있다.
 &lt;/p&gt;
&lt;p&gt;이처럼, 제어의 역전은 객체를 직접 생성하거나 제어하는 것이아니라 외부에서 관리하는 객체를 가져와서 사용하는 것으로, 클레스 간의 결합을 느슨하게 하여 테스트와 유지관리를 더 쉽게 설계하는 원칙이다.
 &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
