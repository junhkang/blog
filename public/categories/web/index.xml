<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WEB on Jun Kang&#39;s Blog</title>
    <link>https://junhkang.com/categories/web/</link>
    <description>Recent content in WEB on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 28 Nov 2023 12:33:47 +0000</lastBuildDate>
    <atom:link href="https://junhkang.com/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WEB] SSR(Server Side Rendering) 과 CSR(Client Side Rendering)의 개념 및 차이</title>
      <link>https://junhkang.com/posts/49/</link>
      <pubDate>Tue, 28 Nov 2023 12:33:47 +0000</pubDate>
      <guid>https://junhkang.com/posts/49/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;ssr-server-side-rendering&#34; ke-size=&#34;size26&#34;&gt;1. SSR (Server Side Rendering)&lt;/h2&gt;
&lt;p&gt;서버에서 렌더링 준비를 마친 상태로 클라이언트에 자원을 전달한다.&lt;/p&gt;
&lt;h3 id=&#34;ssr-작동-방식&#34; style=&#34;color: #000000; text-align: start;&#34; ke-size=&#34;size23&#34;&gt;1-1. SSR 작동 방식&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://junhkang.com/images/posts/49/img.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유저가 웹사이트 자원을 요청&lt;/li&gt;
&lt;li&gt;서버에서 &amp;ldquo;렌더링 가능한&amp;rdquo; HTML 파일 생성 (리소스 체크, 컴파일 후 완성된 HTML 콘텐츠 생성)&lt;/li&gt;
&lt;li&gt;브라우저는 즉시 HTML 렌더링, 사이트 조작 불가 상태&lt;/li&gt;
&lt;li&gt;클라이언트가 자바스크립트를 다운받는다.&lt;/li&gt;
&lt;li&gt;다운로드하여지고 있는 사이 콘텐츠는 볼 수 있지만 조작은 불가, 이 기간 동안 유저의 액션을 기억&lt;/li&gt;
&lt;li&gt;브라우저가 자바스크립트 프레임워크를 실행&lt;/li&gt;
&lt;li&gt;자바스크립트가 컴파일된 후 기억하고 있던 유저 액션을 실행시킨다.&lt;/li&gt;
&lt;li&gt;서버에서 렌더링 가능한 상태로 이미 전달되기에 자바스크립트를 받는 동안 특정 자원을 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ssr-장점&#34; ke-size=&#34;size23&#34;&gt;1-2. SSR 장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;초기 페이지의 로딩속도가 빠르다. &lt;/li&gt;
&lt;li&gt;서버에서 컴파일되어 클라이언트로 넘어오기에 클롤러 대응에 용이하여 SEO 친화적이다.&lt;/li&gt;
&lt;li&gt;클라이언트 하드웨어 및 소프트웨어 성능에 영향을 덜 받는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ssr-선택-기준&#34; ke-size=&#34;size23&#34;&gt;1-3. SSR 선택 기준&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;네트워크가 느릴 때 (페이지마다 나눠서 불러오기 때문)&lt;/li&gt;
&lt;li&gt;검색엔진 최적화가 필요할 때&lt;/li&gt;
&lt;li&gt;최초 로딩이 빨라야 할 때&lt;/li&gt;
&lt;li&gt;메인 스크립트가 크고 로딩이 느릴 때&lt;/li&gt;
&lt;li&gt;웹사이트 상호작용이 별로 없을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;csr-client-side-rendering&#34; ke-size=&#34;size26&#34;&gt;2. CSR (Client Side Rendering)&lt;/h2&gt;
&lt;p&gt;렌더링이 클라이언트에서 일어난다. 서버에선 HTML과 JS를 보내고, 클라이언트에서 렌더링을 시작한다. 모든 로직, 데이터, 템플릿, 라우팅은 클라이언트에서 실행된다. 자바스크립트 번들 크기의 영향을 많이 받기에 코드 분할을 고려해야 하며, 적시 적소에 필요한 기능만을 제공해야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[WEB] JWT 토큰 인증의 개념과 장단점</title>
      <link>https://junhkang.com/posts/41/</link>
      <pubDate>Wed, 01 Nov 2023 18:47:24 +0000</pubDate>
      <guid>https://junhkang.com/posts/41/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;jwt의-개념&#34; ke-size=&#34;size26&#34;&gt;1. JWT의 개념&lt;/h2&gt;
&lt;p&gt;JWT는 웹에서 사용자 인증/인가에 사용하는 토큰으로 Json Web Token의 줄임말이다. 웹에서 사용되는 JSON 형태의 토큰 표준 규격이며 쿠키와 유사하지만, 서명된 토큰이라는 차이점이 있다. 공개키, 개인키의 쌍으로 사용할 경우 서명된 토큰은 개인키를 보유한 서버에서만 복호화가 가능하다.
 &lt;/p&gt;
&lt;p&gt;보통 Authorization HTTP 헤더를 Bearer &amp;lt;토큰&amp;gt; 형태로 설정하여 클라이언트에서 서버로 전송한다. 서버에서는 토큰에 포함되어 있는 서명정보로 위변조를 검증하며 토큰은 Base64 인코딩 되어있다.
 &lt;/p&gt;
&lt;h2 id=&#34;2-jwt-구조&#34;&gt;2. JWT 구조&lt;/h2&gt;
&lt;p&gt;header, payload, signature가 각각 . 으로 구분되어 있다&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
