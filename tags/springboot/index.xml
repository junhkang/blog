<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SpringBoot on Jun Kang&#39;s Blog</title>
    <link>http://localhost:1313/tags/springboot/</link>
    <description>Recent content in SpringBoot on Jun Kang&#39;s Blog</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>ko</language>
    <lastBuildDate>Sun, 22 Sep 2024 17:50:22 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/springboot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Spring] 테스트 1 - 왜 테스트 코드를 작성해야 하는가?</title>
      <link>http://localhost:1313/posts/96/</link>
      <pubDate>Sun, 22 Sep 2024 17:50:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/96/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/96/img.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-why---왜-테스트를-작성해야-하는가&#34;&gt;1. WHY - 왜 테스트를 작성해야 하는가?&lt;/h1&gt;
&lt;h2 id=&#34;테스트-코드의-중요성&#34; ke-size=&#34;size26&#34;&gt;1.1 테스트 코드의 중요성&lt;/h2&gt;
&lt;p&gt;테스트 코드는 소프트웨어 개발에서 매우 중요한 역할을 합니다. 기능을 수정하거나 새로운 기능을 추가할 때 코드가 안정적으로 작동하는지 확인할 수 있는 수단이 바로 테스트 코드입니다. 이를 통해 예상하지 못한 버그를 방지하고, 코드 품질을 높일 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;테스트-코드-작성의-장점&#34; ke-size=&#34;size26&#34;&gt;1.2 테스트 코드 작성의 장점&lt;/h2&gt;
&lt;h3 id=&#34;안정적인-개발-환경-구축&#34; ke-size=&#34;size23&#34;&gt;1.2.1 안정적인 개발 환경 구축&lt;/h3&gt;
&lt;p&gt;테스트 코드는 코드의 변경이 다른 기능에 미치는 영향을 최소화하는 데 도움을 줍니다. 개발자는 자신 있게 코드를 수정하거나 리팩터링 할 수 있으며, 기존 기능이 예상대로 작동하는지 검증할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spring] Caused by: java.lang.IllegalArgumentException: 이름이 {fragment}인, 둘 이상의 fragment들이 발견되었습니다.</title>
      <link>http://localhost:1313/posts/95/</link>
      <pubDate>Tue, 20 Aug 2024 10:41:57 +0000</pubDate>
      <guid>http://localhost:1313/posts/95/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/posts/95/img.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Caused by: java.lang.IllegalArgumentException: 이름이 {fragment}인, 둘 이상의 fragment들이 발견되었습니다. 이는 상대적 순서배열에서 불허됩니다. 상세 정보는 서블릿 스펙 8.2.2 2c 장을 참조하십시오. 절대적 순서배열을 사용하는 것을 고려해 보십시오.]
 &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Spring MVC가 포함되어 있는 상태에서 중복된 디펜던시를 추가하면서 발생한 에러이다. 라이브러리 버전업, 혹은 신규 라이브러리 추가 시 주로 발생하는 현상으로, 메이븐 클린을 통해 메이븐 리포지토리를 정리하면 된다.
 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;메이븐 클린(프로젝트 우클릭 &amp;gt; maven &amp;gt; maven clean)
 &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;그래도 안된다면 실제로 중복된 라이브러리를 정렬 혹은 정리가 필요하다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
